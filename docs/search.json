[
  {
    "objectID": "R4DS_C1.html",
    "href": "R4DS_C1.html",
    "title": "Chapter 1",
    "section": "",
    "text": "Chapter 1 of R4DS covers the basics of data visualization with GGPLOT in R. This page will work through a subset of the chapter’s prompts. I will use the Palmer Penguins dataset to create some graphics. I’ll set up by loading the tidyverse and palmerpenguins packages, and will also load gridExtra to facilitate displaying some of the graphs.\npacman::p_load(tidyverse, palmerpenguins, gridExtra)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R for Data Science (2e) Code Examples",
    "section": "",
    "text": "Introduction\nThis website contains my responses to certain questions in R for Data Science (2e) by Wickham, H., Çetinkaya-Rundel, M., & Grolemund, G. The purpose of this site is to show my ability to complete data cleaning and visualization tasks within R. Not all prompts in R4DS will have responses, and at times my responses will add additional code to modify aesthetics or will stray slightly from the prompts to be unique.\nNote: copying and pasting these answers for academic purposes is discouraged. Writing your own code is how you improve as a data scientist. Honor system.\n\n\nReferences\nWickham, H., Çetinkaya-Rundel, M., & Grolemund, G. (2023). R for Data Science: Import, Tidy, transform, visualize, and model data. O’Reilly. https://r4ds.hadley.nz/\n\n\n\n\n Back to top"
  },
  {
    "objectID": "R4DS_C1.html#how-many-rows-are-in-penguins-how-many-columns",
    "href": "R4DS_C1.html#how-many-rows-are-in-penguins-how-many-columns",
    "title": "R4DS Chapter 1 Examples",
    "section": "1. How many rows are in penguins? How many columns?",
    "text": "1. How many rows are in penguins? How many columns?\n1 answer: 344 rows and 8 columns\n\nnrow(penguins)\n\n[1] 344\n\nncol(penguins)\n\n[1] 8"
  },
  {
    "objectID": "R4DS_C1.html#what-does-the-bill_depth_mm-variable-in-the-penguins-data-frame-describe-read-the-help-for-penguins-to-find-out.",
    "href": "R4DS_C1.html#what-does-the-bill_depth_mm-variable-in-the-penguins-data-frame-describe-read-the-help-for-penguins-to-find-out.",
    "title": "R4DS Chapter 1 Examples",
    "section": "2. What does the bill_depth_mm variable in the penguins data frame describe? Read the help for ?penguins to find out.",
    "text": "2. What does the bill_depth_mm variable in the penguins data frame describe? Read the help for ?penguins to find out.\n2 answer: This variable contains numbers denoting bill depth (millimeters)\n\n#?penguins"
  },
  {
    "objectID": "R4DS_C1.html#make-a-scatterplot-of-bill_depth_mm-vs.-bill_length_mm.-that-is-make-a-scatterplot-with-bill_depth_mm-on-the-y-axis-and-bill_length_mm-on-the-x-axis.-describe-the-relationship-between-these-two-variables.",
    "href": "R4DS_C1.html#make-a-scatterplot-of-bill_depth_mm-vs.-bill_length_mm.-that-is-make-a-scatterplot-with-bill_depth_mm-on-the-y-axis-and-bill_length_mm-on-the-x-axis.-describe-the-relationship-between-these-two-variables.",
    "title": "R4DS Chapter 1 Examples",
    "section": "3. Make a scatterplot of bill_depth_mm vs. bill_length_mm. That is, make a scatterplot with bill_depth_mm on the y-axis and bill_length_mm on the x-axis. Describe the relationship between these two variables.",
    "text": "3. Make a scatterplot of bill_depth_mm vs. bill_length_mm. That is, make a scatterplot with bill_depth_mm on the y-axis and bill_length_mm on the x-axis. Describe the relationship between these two variables.\n3 answer: with the scatterplot alone, there does not appear to be a strong relationship between bill length and depth. If we add a LOESS line with geom_smooth, it will show us that there is a nonlinear relationship between these two variables.\nWe can see that at first, bill depth increases with increases in bill length. Eventually this trend changes and bill depth begins to fall with further increases in length, but then eventually rises again.\n\ngg_1 &lt;- penguins %&gt;%\n  ggplot(aes(bill_length_mm, bill_depth_mm)) +\n  geom_point(shape = 4, na.rm = TRUE) +\n  theme_classic() +\n  labs(\n    x = \"Bill Length\",\n    y = \"Bill Depth\",\n    title = \"Relationship Between Bill Length and Depth Among Penguins in the\\nPalmer Archipelago\")\n\ngg_2 &lt;- penguins %&gt;%\n  ggplot(aes(bill_length_mm, bill_depth_mm)) +\n  geom_point(shape = 4, na.rm = TRUE) +\n  geom_smooth(method = loess, formula = y ~ x, color = \"black\", na.rm = TRUE) +\n  theme_classic() +\n  labs(\n    x = \"Bill Length\",\n    y = \"Bill Depth\",\n    title = \"Relationship Between Bill Length and Depth Among Penguins in the\\nPalmer Archipelago\")\n\ngrid.arrange(gg_1, gg_2, ncol = 2)"
  },
  {
    "objectID": "R4DS_C1.html#what-happens-if-you-make-a-scatterplot-of-species-vs.-bill_depth_mm-what-might-be-a-better-choice-of-geom",
    "href": "R4DS_C1.html#what-happens-if-you-make-a-scatterplot-of-species-vs.-bill_depth_mm-what-might-be-a-better-choice-of-geom",
    "title": "R4DS Chapter 1 Examples",
    "section": "4. What happens if you make a scatterplot of species vs. bill_depth_mm? What might be a better choice of geom?",
    "text": "4. What happens if you make a scatterplot of species vs. bill_depth_mm? What might be a better choice of geom?\n4 answer: scatterplots are not a good way to visualize the relationship between a categorical and continuous variable. Instead, we can use a boxplot.\n\ngg_3 &lt;- penguins %&gt;%\n  ggplot(aes(species, bill_depth_mm)) +\n  geom_point(shape = 4, na.rm = TRUE) +\n  theme_classic() +\n  labs(\n    x = \"Species\",\n    y = \"Bill Depth\",\n    title = \"Relationship Between Species and Bill Depth Among Penguins in the\\nPalmer Archipelago\")\n\ngg_4 &lt;- penguins %&gt;% \n  ggplot(aes(species, bill_depth_mm, fill = species)) +\n  geom_boxplot(na.rm = TRUE) +\n  theme_classic() +\n  labs(\n    x = \"Species\",\n    y = \"Bill Depth\",\n    title = \"Relationship Between Species and Bill Depth Among Penguins in the\\nPalmer Archipelago\")\n\ngrid.arrange(gg_3, gg_4, ncol = 2)"
  },
  {
    "objectID": "R4DS_C1.html#why-does-the-following-give-an-error-and-how-would-you-fix-it",
    "href": "R4DS_C1.html#why-does-the-following-give-an-error-and-how-would-you-fix-it",
    "title": "R4DS Chapter 1 Examples",
    "section": "5. Why does the following give an error and how would you fix it?",
    "text": "5. Why does the following give an error and how would you fix it?\n5 answer: because the aesthetics (x and y variables) have not been specified.\nggplot(data = penguins) + geom_point()\n\nggplot(data = penguins, aes(flipper_length_mm, body_mass_g)) + \n  geom_point(shape = 4, na.rm = TRUE) +\n  theme_classic() +\n  labs(\n    x = \"Flipper Length\",\n    y = \"Body Mass\",\n    title = \"Relationship Between Flipper Length and Body Mass Among Penguins in the\\nPalmer Archipelago\")"
  },
  {
    "objectID": "R4DS_C1.html#what-does-the-na.rm-argument-do-in-geom_point-what-is-the-default-value-of-the-argument-create-a-scatterplot-where-you-successfully-use-this-argument-set-to-true.",
    "href": "R4DS_C1.html#what-does-the-na.rm-argument-do-in-geom_point-what-is-the-default-value-of-the-argument-create-a-scatterplot-where-you-successfully-use-this-argument-set-to-true.",
    "title": "R4DS Chapter 1 Examples",
    "section": "6. What does the na.rm argument do in geom_point()? What is the default value of the argument? Create a scatterplot where you successfully use this argument set to TRUE.",
    "text": "6. What does the na.rm argument do in geom_point()? What is the default value of the argument? Create a scatterplot where you successfully use this argument set to TRUE.\n6 answer: na.rm determines whether missing values are removed. The default is set to FALSE, which means the missing values will not be removed. If the data contains missing values and na.rm is left set to FALSE, R will produce warnings when graphics are generated.\n\npenguins %&gt;%\n  ggplot(aes(bill_length_mm, bill_depth_mm)) +\n  geom_point(shape = 4, na.rm = TRUE) +\n  theme_classic() +\n  labs(\n    x = \"Bill Length\",\n    y = \"Bill Depth\",\n    title = \"Relationship Between Bill Length and Depth Among Penguins in the\\nPalmer Archipelago\")"
  },
  {
    "objectID": "R4DS_C1.html#add-the-following-caption-to-the-plot-you-made-in-the-previous-exercise-data-come-from-the-palmerpenguins-package.-hint-take-a-look-at-the-documentation-for-labs.",
    "href": "R4DS_C1.html#add-the-following-caption-to-the-plot-you-made-in-the-previous-exercise-data-come-from-the-palmerpenguins-package.-hint-take-a-look-at-the-documentation-for-labs.",
    "title": "R4DS Chapter 1 Examples",
    "section": "7. Add the following caption to the plot you made in the previous exercise: “Data come from the palmerpenguins package.” Hint: Take a look at the documentation for labs().",
    "text": "7. Add the following caption to the plot you made in the previous exercise: “Data come from the palmerpenguins package.” Hint: Take a look at the documentation for labs().\n\npenguins %&gt;%\n  ggplot(aes(bill_length_mm, bill_depth_mm)) +\n  geom_point(shape = 4, na.rm = TRUE) +\n  theme_classic() +\n  labs(\n    x = \"Bill Length\",\n    y = \"Bill Depth\",\n    title = \"Relationship Between Bill Length and Depth Among Penguins in the\\nPalmer Archipelago\",\n    caption = \"Data come from the palmerpenguins package.\")"
  },
  {
    "objectID": "R4DS_C1.html#recreate-the-following-visualization.-what-aesthetic-should-bill_depth_mm-be-mapped-to-and-should-it-be-mapped-at-the-global-level-or-at-the-geom-level",
    "href": "R4DS_C1.html#recreate-the-following-visualization.-what-aesthetic-should-bill_depth_mm-be-mapped-to-and-should-it-be-mapped-at-the-global-level-or-at-the-geom-level",
    "title": "R4DS Chapter 1 Examples",
    "section": "8. Recreate the following visualization. What aesthetic should bill_depth_mm be mapped to? And should it be mapped at the global level or at the geom level?",
    "text": "8. Recreate the following visualization. What aesthetic should bill_depth_mm be mapped to? And should it be mapped at the global level or at the geom level?\n8 answer: bill_depth_mm should be mapped to color at the geom_point level so that geom_smooth is displayed as one line\n\npenguins %&gt;% \n  ggplot(aes(flipper_length_mm, body_mass_g)) +\n  geom_point(aes(color = bill_depth_mm), na.rm = TRUE) +\n  geom_smooth(method = loess, formula = y ~ x, na.rm = TRUE)"
  },
  {
    "objectID": "R4DS_C1.html#run-this-code-in-your-head-and-predict-what-the-output-will-look-like.-then-run-the-code-in-r-and-check-your-predictions.",
    "href": "R4DS_C1.html#run-this-code-in-your-head-and-predict-what-the-output-will-look-like.-then-run-the-code-in-r-and-check-your-predictions.",
    "title": "R4DS Chapter 1 Examples",
    "section": "9. Run this code in your head and predict what the output will look like. Then, run the code in R and check your predictions.",
    "text": "9. Run this code in your head and predict what the output will look like. Then, run the code in R and check your predictions.\n9 answer: the x axis will have flipper lengths and the y axis will have body mass. There are three islands, so the graph will have three sets of points color-coded to match the island the penguins are from. There will be three smoothing lines that also correspond to each island, and these lines will not display the confidence intervals.\n\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = island)\n) +\n  geom_point(na.rm = TRUE) +\n  geom_smooth(se = FALSE, na.rm = TRUE, method = loess, formula = y ~ x)"
  },
  {
    "objectID": "R4DS_C1.html#will-these-two-graphs-look-different-whywhy-not",
    "href": "R4DS_C1.html#will-these-two-graphs-look-different-whywhy-not",
    "title": "R4DS Chapter 1 Examples",
    "section": "10. Will these two graphs look different? Why/why not?",
    "text": "10. Will these two graphs look different? Why/why not?\n10 answer: no, they will look the same. The first maps aesthetics at the global level whereas the second maps aesthetics at the local level. However, the way the local aesthetics are mapped will produce the same result as the global mapping because the local mappings for both geom_point and geom_smooth are identical.\n\ngg_5 &lt;- ggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g)\n) +\n  geom_point() +\n  geom_smooth()\n\ngg_6 &lt;- ggplot() +\n  geom_point(\n    data = penguins,\n    mapping = aes(x = flipper_length_mm, y = body_mass_g)\n  ) +\n  geom_smooth(\n    data = penguins,\n    mapping = aes(x = flipper_length_mm, y = body_mass_g)\n  )\n\nsuppressWarnings(\n  suppressMessages(\n    grid.arrange(gg_5, gg_6, ncol = 2)\n  )\n)\n\n\n\n\n\n# #2.4.3 Exercises####\n# \n# #1 Make a bar plot of species of penguins, where you assign species to the y aesthetic. How is this plot different?\n# \n# ggplot(penguins, aes(y = species, fill = species)) +\n#   geom_bar()\n# \n# #answer: the bars are horizontal as opposed to vertical.\n# \n# #2 How are the following two plots different? Which aesthetic, color or fill, is more useful for changing the color of bars?\n# \n# ggplot(penguins, aes(x = species)) +\n#   geom_bar(color = \"red\")\n# \n# ggplot(penguins, aes(x = species)) +\n#   geom_bar(fill = \"red\")\n# \n# #answer: color is applied to the outline of the bars whereas fill applies to the entire bar except the outline. For this graph, filling is more useful for changing the color of the bars.\n# \n# #3 What does the bins argument in geom_histogram() do?\n# \n# ggplot(penguins, aes(x = flipper_length_mm)) +\n#   geom_histogram(\n#     binwidth = 3,\n#     fill = \"firebrick2\",\n#     color = \"black\",\n#     alpha = 0.75,\n#     na.rm = TRUE\n#   )\n# \n# ggplot(penguins, aes(x = flipper_length_mm)) +\n#   geom_histogram(\n#     binwidth = 6,\n#     fill = \"firebrick2\",\n#     color = \"black\",\n#     alpha = 0.75,\n#     na.rm = TRUE\n#   )\n# \n# #answer: this argument specifies how many units of the x variable will be encompassed by 1 bar. Larger bins results in fewer bars in the histogram.\n# \n# #4 Make a histogram of the carat variable in the diamonds dataset that is available when you load the tidyverse package. Experiment with different binwidths. What binwidth reveals the most interesting patterns?\n# \n# summary(diamonds$carat)\n# #x var ranges 0.2 to 5.01, useful for considering appropriate binwidth\n# \n# ggplot(diamonds, aes(x = carat)) +\n#   geom_histogram(\n#     binwidth = 0.05,\n#     fill = \"aquamarine\",\n#     color = \"black\",\n#     alpha = 0.75,\n#     na.rm = TRUE\n#   )\n# \n# ggplot(diamonds, aes(x = carat)) +\n#   geom_histogram(\n#     binwidth = 0.25,\n#     fill = \"lightcoral\",\n#     color = \"black\",\n#     alpha = 0.75,\n#     na.rm = TRUE\n#   )\n# \n# ggplot(diamonds, aes(x = carat)) +\n#   geom_histogram(\n#     binwidth = 0.40,\n#     fill = \"chartreuse\",\n#     color = \"black\",\n#     alpha = 0.75,\n#     na.rm = TRUE\n#   )\n# \n# #the 0.05 binwidth reveals an interesting pattern of clustering around whole numbers, such as carats of 1 and 2.\n# \n# #2.5.5 Exercises####\n# \n# #1 The mpg data frame that is bundled with the ggplot2 package contains 234 observations collected by the US Environmental Protection Agency on 38 car models. Which variables in mpg are categorical? Which variables are numerical? (Hint: Type ?mpg to read the documentation for the dataset.) How can you see this information when you run mpg?\n# \n# ?mpg\n# glimpse(mpg)\n# \n# #answer: categorical variables: manufacturer, model name, trans, drv, fl, class\n# #numerical variables: displ, year, cyl, cty, hwy\n# \n# #2 Make a scatterplot of hwy vs. displ using the mpg data frame. Next, map a third, numerical variable to color, then size, then both color and size, then shape. How do these aesthetics behave differently for categorical vs. numerical variables?\n# \n# ggplot(mpg, aes(displ, hwy)) +\n#   geom_point()\n# \n# ggplot(mpg, aes(displ, hwy, color = cty)) +\n#   geom_point()\n# \n# ggplot(mpg, aes(displ, hwy, size = cty)) +\n#   geom_point()\n# \n# ggplot(mpg, aes(displ, hwy, color = cty, size = cty)) +\n#   geom_point()\n# \n# #ggplot(mpg, aes(displ, hwy, shape = cty)) +\n# #  geom_point()\n# \n# #answer: color gradiants and sizes can accomodate continuous variables but shapes cannot because there are only so many shapes. The shapes option is suited for categorical variables.\n# \n# #3 In the scatterplot of hwy vs. displ, what happens if you map a third variable to linewidth?\n# \n# ggplot(mpg, aes(hwy, displ, linewidth = cty)) +\n#   geom_point()\n# \n# #answer: nothing happens when this is done with a scatterplot, because linewidth applies to geom_lines.\n# \n# ggplot(mpg, aes(hwy, displ, linewidth = cty)) +\n#   geom_line()\n# \n# #4 What happens if you map the same variable to multiple aesthetics?\n# \n# ggplot(mpg, aes(\n#   hwy,\n#   displ,\n#   color = cty,\n#   fill = cty,\n#   size = cty\n# )) +\n#   geom_point()\n# \n# #answer: then the points are modified in multiple ways in accordance with that variable. Above, cty impacts both the size and the color of. the points. For example, low \"cty\" values are darker and smaller, while high \"cty\" values are lighter and larger.\n# \n# #5 Make a scatterplot of bill_depth_mm vs. bill_length_mm and color the points by species. What does adding coloring by species reveal about the relationship between these two variables? What about faceting by species?\n# \n# ggplot(penguins, aes(bill_length_mm, bill_depth_mm, color = species)) +\n#   geom_point()\n# \n# ggplot(penguins, aes(bill_length_mm, bill_depth_mm, color = species)) +\n#   geom_point() +\n#   facet_wrap( ~ species)\n# \n# #answer: Adelie species has smaller lengths and higher depths, whereas Gento species has larger lengths and smaller depths. Chinstrap species has depths similar to Adelie and lengths similar to Gentoo. Faceting by species shows the same thing but is just an alternative way to visualize this relationship.\n# \n# #6 Why does the following yield two separate legends? How would you fix it to combine the two legends?\n# \n# ggplot(\n#   data = penguins,\n#   mapping = aes(\n#     x = bill_length_mm,\n#     y = bill_depth_mm,\n#     color = species,\n#     shape = species\n#   )\n# ) +\n#   geom_point() +\n#   labs(color = \"Species\", shape = \"Species\")\n# \n# #answer: there is a legend for color and a legend for shape. This could be fixed by adding labs() mapping both color and shape to species\n# \n# #7 Create the two following stacked bar plots. Which question can you answer with the first one? Which question can you answer with the second one?\n# \n# ggplot(penguins, aes(x = island, fill = species)) +\n#   geom_bar(position = \"fill\")\n# \n# #answer: what is the composition of penguin species by island? For example, what portion of penguins on Biscoe are Gentoo? Approximately 75%.\n# \n# ggplot(penguins, aes(x = species, fill = island)) +\n#   geom_bar(position = \"fill\")\n# \n# #answer: How much of each species is concentrated on each island? For example, what portion of Adelie penguins are located on Torgensen? Approximately 30%.\n# \n# #2.6.1 Exercises####\n# \n# #1 Run the following lines of code. Which of the two plots is saved as mpg-plot.png? Why?\n# \n# ggplot(mpg, aes(x = class)) +\n#   geom_bar()\n# \n# ggplot(mpg, aes(x = cty, y = hwy)) +\n#   geom_point()\n# \n# ggsave(\"mpg-plot.png\")\n# \n# #answer: the second plot is saved because ggsave saves the last plot made.\n# \n# #2 What do you need to change in the code above to save the plot as a PDF instead of a PNG? How could you find out what types of image files would work in ggsave()?\n# \n# #answer: change the file type to pdf within quotes. You can find out what other file types are possible using ?ggsave\n# \n# ggsave(\"mpg-plot.pdf\")\n# \n# ?ggsave\n# #Device to use. Can either be a device function (e.g. png), or one of \"eps\", \"ps\", \"tex\" (pictex), \"pdf\", \"jpeg\", \"tiff\", \"png\", \"bmp\", \"svg\" or \"wmf\" (windows only)."
  },
  {
    "objectID": "R4DS_C1.html#section",
    "href": "R4DS_C1.html#section",
    "title": "Chapter 1",
    "section": "1.2.5.1",
    "text": "1.2.5.1\nHow many rows are in penguins? How many columns?\n1 answer: 344 rows and 8 columns\n\nnrow(penguins)\n\n[1] 344\n\nncol(penguins)\n\n[1] 8"
  },
  {
    "objectID": "R4DS_C1.html#section-1",
    "href": "R4DS_C1.html#section-1",
    "title": "Chapter 1",
    "section": "1.2.5.2",
    "text": "1.2.5.2\nWhat does the bill_depth_mm variable in the penguins data frame describe? Read the help for ?penguins to find out.\n2 answer: This variable contains numbers denoting bill depth (millimeters)\n\n#?penguins"
  },
  {
    "objectID": "R4DS_C1.html#section-2",
    "href": "R4DS_C1.html#section-2",
    "title": "Chapter 1",
    "section": "1.2.5.3",
    "text": "1.2.5.3\nMake a scatterplot of bill_depth_mm vs. bill_length_mm. That is, make a scatterplot with bill_depth_mm on the y-axis and bill_length_mm on the x-axis. Describe the relationship between these two variables.\n3 answer: with the scatterplot alone (plot 1), there does not appear to be a strong relationship between bill length and depth. If we add a LOESS line with geom_smooth (plot 2), it will show us that there is a nonlinear relationship between these two variables.\nWe can see that at first, bill depth increases with increases in bill length. Eventually this trend changes and bill depth begins to fall with further increases in length, but then eventually rises again.\n\nPlot 1Plot 2\n\n\n\npenguins %&gt;%\n  ggplot(aes(bill_length_mm, bill_depth_mm)) +\n  geom_point(shape = 4, na.rm = TRUE) +\n  theme_classic() +\n  labs(\n    x = \"Bill Length\",\n    y = \"Bill Depth\",\n    title = \"Relationship Between Bill Length and Depth Among Penguins in the\\nPalmer Archipelago\")\n\n\n\n\n\n\n\npenguins %&gt;%\n  ggplot(aes(bill_length_mm, bill_depth_mm)) +\n  geom_point(shape = 4, na.rm = TRUE) +\n  geom_smooth(method = loess, formula = y ~ x, color = \"black\", na.rm = TRUE) +\n  theme_classic() +\n  labs(\n    x = \"Bill Length\",\n    y = \"Bill Depth\",\n    title = \"Relationship Between Bill Length and Depth Among Penguins in the\\nPalmer Archipelago\")"
  },
  {
    "objectID": "R4DS_C1.html#section-3",
    "href": "R4DS_C1.html#section-3",
    "title": "Chapter 1",
    "section": "1.2.5.4",
    "text": "1.2.5.4\nWhat happens if you make a scatterplot of species vs. bill_depth_mm? What might be a better choice of geom?\n4 answer: scatterplots are not a good way to visualize the relationship between a categorical and continuous variable. Instead, we can use a boxplot.\n\nPlot 1Plot 2\n\n\n\npenguins %&gt;%\n  ggplot(aes(species, bill_depth_mm)) +\n  geom_point(shape = 4, na.rm = TRUE) +\n  theme_classic() +\n  labs(\n    x = \"Species\",\n    y = \"Bill Depth\",\n    title = \"Relationship Between Species and Bill Depth Among Penguins in the\\nPalmer Archipelago\")\n\n\n\n\n\n\n\npenguins %&gt;% \n  ggplot(aes(species, bill_depth_mm, fill = species)) +\n  geom_boxplot(na.rm = TRUE) +\n  theme_classic() +\n  labs(\n    x = \"Species\",\n    y = \"Bill Depth\",\n    title = \"Relationship Between Species and Bill Depth Among Penguins in the\\nPalmer Archipelago\")"
  },
  {
    "objectID": "R4DS_C1.html#section-4",
    "href": "R4DS_C1.html#section-4",
    "title": "Chapter 1",
    "section": "1.2.5.5",
    "text": "1.2.5.5\nWhy does the following give an error and how would you fix it?\n5 answer: because the aesthetics (x and y variables) have not been specified.\nggplot(data = penguins) + geom_point()\n\nggplot(data = penguins, aes(flipper_length_mm, body_mass_g)) + \n  geom_point(shape = 4, na.rm = TRUE) +\n  theme_classic() +\n  labs(\n    x = \"Flipper Length\",\n    y = \"Body Mass\",\n    title = \"Relationship Between Flipper Length and Body Mass Among Penguins in the\\nPalmer Archipelago\")"
  },
  {
    "objectID": "R4DS_C1.html#section-5",
    "href": "R4DS_C1.html#section-5",
    "title": "Chapter 1",
    "section": "1.2.5.6",
    "text": "1.2.5.6\nWhat does the na.rm argument do in geom_point()? What is the default value of the argument? Create a scatterplot where you successfully use this argument set to TRUE.\n6 answer: na.rm determines whether missing values are removed. The default is set to FALSE, which means the missing values will not be removed. If the data contains missing values and na.rm is left set to FALSE, R will produce warnings when graphics are generated.\n\npenguins %&gt;%\n  ggplot(aes(bill_length_mm, bill_depth_mm)) +\n  geom_point(shape = 4, na.rm = TRUE) +\n  theme_classic() +\n  labs(\n    x = \"Bill Length\",\n    y = \"Bill Depth\",\n    title = \"Relationship Between Bill Length and Depth Among Penguins in the\\nPalmer Archipelago\")"
  },
  {
    "objectID": "R4DS_C1.html#section-6",
    "href": "R4DS_C1.html#section-6",
    "title": "Chapter 1",
    "section": "1.2.5.7",
    "text": "1.2.5.7\nAdd the following caption to the plot you made in the previous exercise: “Data come from the palmerpenguins package.” Hint: Take a look at the documentation for labs().\n\npenguins %&gt;%\n  ggplot(aes(bill_length_mm, bill_depth_mm)) +\n  geom_point(shape = 4, na.rm = TRUE) +\n  theme_classic() +\n  labs(\n    x = \"Bill Length\",\n    y = \"Bill Depth\",\n    title = \"Relationship Between Bill Length and Depth Among Penguins in the\\nPalmer Archipelago\",\n    caption = \"Data come from the palmerpenguins package.\")"
  },
  {
    "objectID": "R4DS_C1.html#section-7",
    "href": "R4DS_C1.html#section-7",
    "title": "Chapter 1",
    "section": "1.2.5.8",
    "text": "1.2.5.8\nRecreate the following visualization. What aesthetic should bill_depth_mm be mapped to? And should it be mapped at the global level or at the geom level?\n8 answer: bill_depth_mm should be mapped to color at the geom_point level so that geom_smooth is displayed as one line\n\npenguins %&gt;% \n  ggplot(aes(flipper_length_mm, body_mass_g)) +\n  geom_point(aes(color = bill_depth_mm), na.rm = TRUE) +\n  geom_smooth(method = loess, formula = y ~ x, na.rm = TRUE)"
  },
  {
    "objectID": "R4DS_C1.html#section-8",
    "href": "R4DS_C1.html#section-8",
    "title": "Chapter 1",
    "section": "1.2.5.9",
    "text": "1.2.5.9\nRun this code in your head and predict what the output will look like. Then, run the code in R and check your predictions.\n9 answer: the x axis will have flipper lengths and the y axis will have body mass. There are three islands, so the graph will have three sets of points color-coded to match the island the penguins are from. There will be three smoothing lines that also correspond to each island, and these lines will not display the confidence intervals.\n\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = island)\n) +\n  geom_point(na.rm = TRUE) +\n  geom_smooth(se = FALSE, na.rm = TRUE, method = loess, formula = y ~ x)"
  },
  {
    "objectID": "R4DS_C1.html#section-9",
    "href": "R4DS_C1.html#section-9",
    "title": "Chapter 1",
    "section": "1.2.5.10",
    "text": "1.2.5.10\nWill these two graphs look different? Why/why not?\n10 answer: no, they will look the same. The first maps aesthetics at the global level whereas the second maps aesthetics at the local level. However, the way the local aesthetics are mapped will produce the same result as the global mapping because the local mappings for both geom_point and geom_smooth are identical.\n\nPlot 1Plot 2\n\n\n\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g)\n) +\n  geom_point(na.rm = TRUE) +\n  geom_smooth(na.rm = TRUE)\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\nggplot() +\n  geom_point(\n    data = penguins,\n    mapping = aes(x = flipper_length_mm, y = body_mass_g), na.rm = TRUE) +\n  geom_smooth(\n    data = penguins,\n    formula = y ~ x,\n    method = loess,\n    mapping = aes(x = flipper_length_mm, y = body_mass_g), na.rm = TRUE)\n\n\n\nggplot() +\n  geom_point(\n    data = penguins,\n    mapping = aes(x = flipper_length_mm, y = body_mass_g),\n    na.rm = TRUE\n    ) +\n  geom_smooth(\n    data = penguins,\n    formula = y ~ x,\n    method = loess,\n    mapping = aes(x = flipper_length_mm, y = body_mass_g),\n    na.rm = TRUE)\n\n\n\n\n\n\n\n\n# #2.4.3 Exercises####\n# \n# #1 Make a bar plot of species of penguins, where you assign species to the y aesthetic. How is this plot different?\n# \n# ggplot(penguins, aes(y = species, fill = species)) +\n#   geom_bar()\n# \n# #answer: the bars are horizontal as opposed to vertical.\n# \n# #2 How are the following two plots different? Which aesthetic, color or fill, is more useful for changing the color of bars?\n# \n# ggplot(penguins, aes(x = species)) +\n#   geom_bar(color = \"red\")\n# \n# ggplot(penguins, aes(x = species)) +\n#   geom_bar(fill = \"red\")\n# \n# #answer: color is applied to the outline of the bars whereas fill applies to the entire bar except the outline. For this graph, filling is more useful for changing the color of the bars.\n# \n# #3 What does the bins argument in geom_histogram() do?\n# \n# ggplot(penguins, aes(x = flipper_length_mm)) +\n#   geom_histogram(\n#     binwidth = 3,\n#     fill = \"firebrick2\",\n#     color = \"black\",\n#     alpha = 0.75,\n#     na.rm = TRUE\n#   )\n# \n# ggplot(penguins, aes(x = flipper_length_mm)) +\n#   geom_histogram(\n#     binwidth = 6,\n#     fill = \"firebrick2\",\n#     color = \"black\",\n#     alpha = 0.75,\n#     na.rm = TRUE\n#   )\n# \n# #answer: this argument specifies how many units of the x variable will be encompassed by 1 bar. Larger bins results in fewer bars in the histogram.\n# \n# #4 Make a histogram of the carat variable in the diamonds dataset that is available when you load the tidyverse package. Experiment with different binwidths. What binwidth reveals the most interesting patterns?\n# \n# summary(diamonds$carat)\n# #x var ranges 0.2 to 5.01, useful for considering appropriate binwidth\n# \n# ggplot(diamonds, aes(x = carat)) +\n#   geom_histogram(\n#     binwidth = 0.05,\n#     fill = \"aquamarine\",\n#     color = \"black\",\n#     alpha = 0.75,\n#     na.rm = TRUE\n#   )\n# \n# ggplot(diamonds, aes(x = carat)) +\n#   geom_histogram(\n#     binwidth = 0.25,\n#     fill = \"lightcoral\",\n#     color = \"black\",\n#     alpha = 0.75,\n#     na.rm = TRUE\n#   )\n# \n# ggplot(diamonds, aes(x = carat)) +\n#   geom_histogram(\n#     binwidth = 0.40,\n#     fill = \"chartreuse\",\n#     color = \"black\",\n#     alpha = 0.75,\n#     na.rm = TRUE\n#   )\n# \n# #the 0.05 binwidth reveals an interesting pattern of clustering around whole numbers, such as carats of 1 and 2.\n# \n# #2.5.5 Exercises####\n# \n# #1 The mpg data frame that is bundled with the ggplot2 package contains 234 observations collected by the US Environmental Protection Agency on 38 car models. Which variables in mpg are categorical? Which variables are numerical? (Hint: Type ?mpg to read the documentation for the dataset.) How can you see this information when you run mpg?\n# \n# ?mpg\n# glimpse(mpg)\n# \n# #answer: categorical variables: manufacturer, model name, trans, drv, fl, class\n# #numerical variables: displ, year, cyl, cty, hwy\n# \n# #2 Make a scatterplot of hwy vs. displ using the mpg data frame. Next, map a third, numerical variable to color, then size, then both color and size, then shape. How do these aesthetics behave differently for categorical vs. numerical variables?\n# \n# ggplot(mpg, aes(displ, hwy)) +\n#   geom_point()\n# \n# ggplot(mpg, aes(displ, hwy, color = cty)) +\n#   geom_point()\n# \n# ggplot(mpg, aes(displ, hwy, size = cty)) +\n#   geom_point()\n# \n# ggplot(mpg, aes(displ, hwy, color = cty, size = cty)) +\n#   geom_point()\n# \n# #ggplot(mpg, aes(displ, hwy, shape = cty)) +\n# #  geom_point()\n# \n# #answer: color gradiants and sizes can accomodate continuous variables but shapes cannot because there are only so many shapes. The shapes option is suited for categorical variables.\n# \n# #3 In the scatterplot of hwy vs. displ, what happens if you map a third variable to linewidth?\n# \n# ggplot(mpg, aes(hwy, displ, linewidth = cty)) +\n#   geom_point()\n# \n# #answer: nothing happens when this is done with a scatterplot, because linewidth applies to geom_lines.\n# \n# ggplot(mpg, aes(hwy, displ, linewidth = cty)) +\n#   geom_line()\n# \n# #4 What happens if you map the same variable to multiple aesthetics?\n# \n# ggplot(mpg, aes(\n#   hwy,\n#   displ,\n#   color = cty,\n#   fill = cty,\n#   size = cty\n# )) +\n#   geom_point()\n# \n# #answer: then the points are modified in multiple ways in accordance with that variable. Above, cty impacts both the size and the color of. the points. For example, low \"cty\" values are darker and smaller, while high \"cty\" values are lighter and larger.\n# \n# #5 Make a scatterplot of bill_depth_mm vs. bill_length_mm and color the points by species. What does adding coloring by species reveal about the relationship between these two variables? What about faceting by species?\n# \n# ggplot(penguins, aes(bill_length_mm, bill_depth_mm, color = species)) +\n#   geom_point()\n# \n# ggplot(penguins, aes(bill_length_mm, bill_depth_mm, color = species)) +\n#   geom_point() +\n#   facet_wrap( ~ species)\n# \n# #answer: Adelie species has smaller lengths and higher depths, whereas Gento species has larger lengths and smaller depths. Chinstrap species has depths similar to Adelie and lengths similar to Gentoo. Faceting by species shows the same thing but is just an alternative way to visualize this relationship.\n# \n# #6 Why does the following yield two separate legends? How would you fix it to combine the two legends?\n# \n# ggplot(\n#   data = penguins,\n#   mapping = aes(\n#     x = bill_length_mm,\n#     y = bill_depth_mm,\n#     color = species,\n#     shape = species\n#   )\n# ) +\n#   geom_point() +\n#   labs(color = \"Species\", shape = \"Species\")\n# \n# #answer: there is a legend for color and a legend for shape. This could be fixed by adding labs() mapping both color and shape to species\n# \n# #7 Create the two following stacked bar plots. Which question can you answer with the first one? Which question can you answer with the second one?\n# \n# ggplot(penguins, aes(x = island, fill = species)) +\n#   geom_bar(position = \"fill\")\n# \n# #answer: what is the composition of penguin species by island? For example, what portion of penguins on Biscoe are Gentoo? Approximately 75%.\n# \n# ggplot(penguins, aes(x = species, fill = island)) +\n#   geom_bar(position = \"fill\")\n# \n# #answer: How much of each species is concentrated on each island? For example, what portion of Adelie penguins are located on Torgensen? Approximately 30%.\n# \n# #2.6.1 Exercises####\n# \n# #1 Run the following lines of code. Which of the two plots is saved as mpg-plot.png? Why?\n# \n# ggplot(mpg, aes(x = class)) +\n#   geom_bar()\n# \n# ggplot(mpg, aes(x = cty, y = hwy)) +\n#   geom_point()\n# \n# ggsave(\"mpg-plot.png\")\n# \n# #answer: the second plot is saved because ggsave saves the last plot made.\n# \n# #2 What do you need to change in the code above to save the plot as a PDF instead of a PNG? How could you find out what types of image files would work in ggsave()?\n# \n# #answer: change the file type to pdf within quotes. You can find out what other file types are possible using ?ggsave\n# \n# ggsave(\"mpg-plot.pdf\")\n# \n# ?ggsave\n# #Device to use. Can either be a device function (e.g. png), or one of \"eps\", \"ps\", \"tex\" (pictex), \"pdf\", \"jpeg\", \"tiff\", \"png\", \"bmp\", \"svg\" or \"wmf\" (windows only)."
  },
  {
    "objectID": "R4DS_C1.html#plot-1-2",
    "href": "R4DS_C1.html#plot-1-2",
    "title": "Chapter 1",
    "section": "Plot 1",
    "text": "Plot 1\n\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g)\n) +\n  geom_point(na.rm = TRUE) +\n  geom_smooth(na.rm = TRUE)\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'"
  },
  {
    "objectID": "R4DS_C1.html#plot-2-2",
    "href": "R4DS_C1.html#plot-2-2",
    "title": "Chapter 1",
    "section": "Plot 2",
    "text": "Plot 2\n\nggplot() +\n  geom_point(\n    data = penguins,\n    mapping = aes(x = flipper_length_mm, y = body_mass_g, na.rm = TRUE)\n  ) +\n  geom_smooth(\n    data = penguins,\n    mapping = aes(x = flipper_length_mm, y = body_mass_g, na.rm = TRUE)\n  )\n\nWarning in geom_point(data = penguins, mapping = aes(x = flipper_length_mm, :\nIgnoring unknown aesthetics: na.rm\n\n\nWarning in geom_smooth(data = penguins, mapping = aes(x = flipper_length_mm, :\nIgnoring unknown aesthetics: na.rm\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n# #2.4.3 Exercises####\n# \n# #1 Make a bar plot of species of penguins, where you assign species to the y aesthetic. How is this plot different?\n# \n# ggplot(penguins, aes(y = species, fill = species)) +\n#   geom_bar()\n# \n# #answer: the bars are horizontal as opposed to vertical.\n# \n# #2 How are the following two plots different? Which aesthetic, color or fill, is more useful for changing the color of bars?\n# \n# ggplot(penguins, aes(x = species)) +\n#   geom_bar(color = \"red\")\n# \n# ggplot(penguins, aes(x = species)) +\n#   geom_bar(fill = \"red\")\n# \n# #answer: color is applied to the outline of the bars whereas fill applies to the entire bar except the outline. For this graph, filling is more useful for changing the color of the bars.\n# \n# #3 What does the bins argument in geom_histogram() do?\n# \n# ggplot(penguins, aes(x = flipper_length_mm)) +\n#   geom_histogram(\n#     binwidth = 3,\n#     fill = \"firebrick2\",\n#     color = \"black\",\n#     alpha = 0.75,\n#     na.rm = TRUE\n#   )\n# \n# ggplot(penguins, aes(x = flipper_length_mm)) +\n#   geom_histogram(\n#     binwidth = 6,\n#     fill = \"firebrick2\",\n#     color = \"black\",\n#     alpha = 0.75,\n#     na.rm = TRUE\n#   )\n# \n# #answer: this argument specifies how many units of the x variable will be encompassed by 1 bar. Larger bins results in fewer bars in the histogram.\n# \n# #4 Make a histogram of the carat variable in the diamonds dataset that is available when you load the tidyverse package. Experiment with different binwidths. What binwidth reveals the most interesting patterns?\n# \n# summary(diamonds$carat)\n# #x var ranges 0.2 to 5.01, useful for considering appropriate binwidth\n# \n# ggplot(diamonds, aes(x = carat)) +\n#   geom_histogram(\n#     binwidth = 0.05,\n#     fill = \"aquamarine\",\n#     color = \"black\",\n#     alpha = 0.75,\n#     na.rm = TRUE\n#   )\n# \n# ggplot(diamonds, aes(x = carat)) +\n#   geom_histogram(\n#     binwidth = 0.25,\n#     fill = \"lightcoral\",\n#     color = \"black\",\n#     alpha = 0.75,\n#     na.rm = TRUE\n#   )\n# \n# ggplot(diamonds, aes(x = carat)) +\n#   geom_histogram(\n#     binwidth = 0.40,\n#     fill = \"chartreuse\",\n#     color = \"black\",\n#     alpha = 0.75,\n#     na.rm = TRUE\n#   )\n# \n# #the 0.05 binwidth reveals an interesting pattern of clustering around whole numbers, such as carats of 1 and 2.\n# \n# #2.5.5 Exercises####\n# \n# #1 The mpg data frame that is bundled with the ggplot2 package contains 234 observations collected by the US Environmental Protection Agency on 38 car models. Which variables in mpg are categorical? Which variables are numerical? (Hint: Type ?mpg to read the documentation for the dataset.) How can you see this information when you run mpg?\n# \n# ?mpg\n# glimpse(mpg)\n# \n# #answer: categorical variables: manufacturer, model name, trans, drv, fl, class\n# #numerical variables: displ, year, cyl, cty, hwy\n# \n# #2 Make a scatterplot of hwy vs. displ using the mpg data frame. Next, map a third, numerical variable to color, then size, then both color and size, then shape. How do these aesthetics behave differently for categorical vs. numerical variables?\n# \n# ggplot(mpg, aes(displ, hwy)) +\n#   geom_point()\n# \n# ggplot(mpg, aes(displ, hwy, color = cty)) +\n#   geom_point()\n# \n# ggplot(mpg, aes(displ, hwy, size = cty)) +\n#   geom_point()\n# \n# ggplot(mpg, aes(displ, hwy, color = cty, size = cty)) +\n#   geom_point()\n# \n# #ggplot(mpg, aes(displ, hwy, shape = cty)) +\n# #  geom_point()\n# \n# #answer: color gradiants and sizes can accomodate continuous variables but shapes cannot because there are only so many shapes. The shapes option is suited for categorical variables.\n# \n# #3 In the scatterplot of hwy vs. displ, what happens if you map a third variable to linewidth?\n# \n# ggplot(mpg, aes(hwy, displ, linewidth = cty)) +\n#   geom_point()\n# \n# #answer: nothing happens when this is done with a scatterplot, because linewidth applies to geom_lines.\n# \n# ggplot(mpg, aes(hwy, displ, linewidth = cty)) +\n#   geom_line()\n# \n# #4 What happens if you map the same variable to multiple aesthetics?\n# \n# ggplot(mpg, aes(\n#   hwy,\n#   displ,\n#   color = cty,\n#   fill = cty,\n#   size = cty\n# )) +\n#   geom_point()\n# \n# #answer: then the points are modified in multiple ways in accordance with that variable. Above, cty impacts both the size and the color of. the points. For example, low \"cty\" values are darker and smaller, while high \"cty\" values are lighter and larger.\n# \n# #5 Make a scatterplot of bill_depth_mm vs. bill_length_mm and color the points by species. What does adding coloring by species reveal about the relationship between these two variables? What about faceting by species?\n# \n# ggplot(penguins, aes(bill_length_mm, bill_depth_mm, color = species)) +\n#   geom_point()\n# \n# ggplot(penguins, aes(bill_length_mm, bill_depth_mm, color = species)) +\n#   geom_point() +\n#   facet_wrap( ~ species)\n# \n# #answer: Adelie species has smaller lengths and higher depths, whereas Gento species has larger lengths and smaller depths. Chinstrap species has depths similar to Adelie and lengths similar to Gentoo. Faceting by species shows the same thing but is just an alternative way to visualize this relationship.\n# \n# #6 Why does the following yield two separate legends? How would you fix it to combine the two legends?\n# \n# ggplot(\n#   data = penguins,\n#   mapping = aes(\n#     x = bill_length_mm,\n#     y = bill_depth_mm,\n#     color = species,\n#     shape = species\n#   )\n# ) +\n#   geom_point() +\n#   labs(color = \"Species\", shape = \"Species\")\n# \n# #answer: there is a legend for color and a legend for shape. This could be fixed by adding labs() mapping both color and shape to species\n# \n# #7 Create the two following stacked bar plots. Which question can you answer with the first one? Which question can you answer with the second one?\n# \n# ggplot(penguins, aes(x = island, fill = species)) +\n#   geom_bar(position = \"fill\")\n# \n# #answer: what is the composition of penguin species by island? For example, what portion of penguins on Biscoe are Gentoo? Approximately 75%.\n# \n# ggplot(penguins, aes(x = species, fill = island)) +\n#   geom_bar(position = \"fill\")\n# \n# #answer: How much of each species is concentrated on each island? For example, what portion of Adelie penguins are located on Torgensen? Approximately 30%.\n# \n# #2.6.1 Exercises####\n# \n# #1 Run the following lines of code. Which of the two plots is saved as mpg-plot.png? Why?\n# \n# ggplot(mpg, aes(x = class)) +\n#   geom_bar()\n# \n# ggplot(mpg, aes(x = cty, y = hwy)) +\n#   geom_point()\n# \n# ggsave(\"mpg-plot.png\")\n# \n# #answer: the second plot is saved because ggsave saves the last plot made.\n# \n# #2 What do you need to change in the code above to save the plot as a PDF instead of a PNG? How could you find out what types of image files would work in ggsave()?\n# \n# #answer: change the file type to pdf within quotes. You can find out what other file types are possible using ?ggsave\n# \n# ggsave(\"mpg-plot.pdf\")\n# \n# ?ggsave\n# #Device to use. Can either be a device function (e.g. png), or one of \"eps\", \"ps\", \"tex\" (pictex), \"pdf\", \"jpeg\", \"tiff\", \"png\", \"bmp\", \"svg\" or \"wmf\" (windows only)."
  },
  {
    "objectID": "R4DS_C1.html#exercise-1.2.5.1",
    "href": "R4DS_C1.html#exercise-1.2.5.1",
    "title": "Chapter 1",
    "section": "Exercise 1.2.5.1",
    "text": "Exercise 1.2.5.1\nHow many rows are in penguins? How many columns?\n1 answer: 344 rows and 8 columns\n\nnrow(penguins)\n\n[1] 344\n\nncol(penguins)\n\n[1] 8"
  },
  {
    "objectID": "R4DS_C1.html#exercise-1.2.5.2",
    "href": "R4DS_C1.html#exercise-1.2.5.2",
    "title": "Chapter 1",
    "section": "Exercise 1.2.5.2",
    "text": "Exercise 1.2.5.2\nWhat does the bill_depth_mm variable in the penguins data frame describe? Read the help for ?penguins to find out.\n2 answer: This variable contains numbers denoting bill depth (millimeters)\n\n#?penguins"
  },
  {
    "objectID": "R4DS_C1.html#exercise-1.2.5.3",
    "href": "R4DS_C1.html#exercise-1.2.5.3",
    "title": "Chapter 1",
    "section": "Exercise 1.2.5.3",
    "text": "Exercise 1.2.5.3\nMake a scatterplot of bill_depth_mm vs. bill_length_mm. That is, make a scatterplot with bill_depth_mm on the y-axis and bill_length_mm on the x-axis. Describe the relationship between these two variables.\n3 answer: with the scatterplot alone (plot 1), there does not appear to be a strong relationship between bill length and depth. If we add a LOESS line with geom_smooth (plot 2), it will show us that there is a nonlinear relationship between these two variables.\nIn plot 2, we can see that at first, bill depth increases with increases in bill length. Eventually this trend changes and bill depth begins to fall with further increases in length, but then eventually rises again.\n\nPlot 1Plot 2\n\n\n\npenguins %&gt;%\n  ggplot(aes(bill_length_mm, bill_depth_mm)) +\n  geom_point(shape = 4, na.rm = TRUE) +\n  theme_classic() +\n  labs(\n    x = \"Bill Length\",\n    y = \"Bill Depth\",\n    title = \"Relationship Between Bill Length and Depth Among Penguins in the\\nPalmer Archipelago\")\n\n\n\n\n\n\n\npenguins %&gt;%\n  ggplot(aes(bill_length_mm, bill_depth_mm)) +\n  geom_point(shape = 4, na.rm = TRUE) +\n  geom_smooth(method = loess, formula = y ~ x, color = \"black\", na.rm = TRUE) +\n  theme_classic() +\n  labs(\n    x = \"Bill Length\",\n    y = \"Bill Depth\",\n    title = \"Relationship Between Bill Length and Depth Among Penguins in the\\nPalmer Archipelago\")"
  },
  {
    "objectID": "R4DS_C1.html#exercise-1.2.5.4",
    "href": "R4DS_C1.html#exercise-1.2.5.4",
    "title": "Chapter 1",
    "section": "Exercise 1.2.5.4",
    "text": "Exercise 1.2.5.4\nWhat happens if you make a scatterplot of species vs. bill_depth_mm? What might be a better choice of geom?\n4 answer: scatterplots are not a good way to visualize the relationship between a categorical and continuous variable. Instead, we can use a boxplot.\n\nPlot 1Plot 2\n\n\n\npenguins %&gt;%\n  ggplot(aes(species, bill_depth_mm)) +\n  geom_point(shape = 4, na.rm = TRUE) +\n  theme_classic() +\n  labs(\n    x = \"Species\",\n    y = \"Bill Depth\",\n    title = \"Relationship Between Species and Bill Depth Among Penguins in the\\nPalmer Archipelago\")\n\n\n\n\n\n\n\npenguins %&gt;% \n  ggplot(aes(species, bill_depth_mm, fill = species)) +\n  geom_boxplot(na.rm = TRUE) +\n  theme_classic() +\n  labs(\n    x = \"Species\",\n    y = \"Bill Depth\",\n    title = \"Relationship Between Species and Bill Depth Among Penguins in the\\nPalmer Archipelago\")"
  },
  {
    "objectID": "R4DS_C1.html#exercise-1.2.5.5",
    "href": "R4DS_C1.html#exercise-1.2.5.5",
    "title": "Chapter 1",
    "section": "Exercise 1.2.5.5",
    "text": "Exercise 1.2.5.5\nWhy does the following give an error and how would you fix it?\n5 answer: because the aesthetics (x and y variables) have not been specified.\nggplot(data = penguins) + geom_point()\n\nggplot(data = penguins, aes(flipper_length_mm, body_mass_g)) + \n  geom_point(shape = 4, na.rm = TRUE) +\n  theme_classic() +\n  labs(\n    x = \"Flipper Length\",\n    y = \"Body Mass\",\n    title = \"Relationship Between Flipper Length and Body Mass Among Penguins in the\\nPalmer Archipelago\")"
  },
  {
    "objectID": "R4DS_C1.html#exercise-1.2.5.6",
    "href": "R4DS_C1.html#exercise-1.2.5.6",
    "title": "Chapter 1",
    "section": "Exercise 1.2.5.6",
    "text": "Exercise 1.2.5.6\nWhat does the na.rm argument do in geom_point()? What is the default value of the argument? Create a scatterplot where you successfully use this argument set to TRUE.\n6 answer: na.rm determines whether missing values are removed with a warning or silently. The default is set to FALSE, which means the missing values will be removed with a warning.\n\npenguins %&gt;%\n  ggplot(aes(bill_length_mm, bill_depth_mm)) +\n  geom_point(shape = 4, na.rm = TRUE) +\n  theme_classic() +\n  labs(\n    x = \"Bill Length\",\n    y = \"Bill Depth\",\n    title = \"Relationship Between Bill Length and Depth Among Penguins in the\\nPalmer Archipelago\")"
  },
  {
    "objectID": "R4DS_C1.html#exercise-1.2.5.7",
    "href": "R4DS_C1.html#exercise-1.2.5.7",
    "title": "Chapter 1",
    "section": "Exercise 1.2.5.7",
    "text": "Exercise 1.2.5.7\nAdd the following caption to the plot you made in the previous exercise: “Data come from the palmerpenguins package.” Hint: Take a look at the documentation for labs().\n\npenguins %&gt;%\n  ggplot(aes(bill_length_mm, bill_depth_mm)) +\n  geom_point(shape = 4, na.rm = TRUE) +\n  theme_classic() +\n  labs(\n    x = \"Bill Length\",\n    y = \"Bill Depth\",\n    title = \"Relationship Between Bill Length and Depth Among Penguins in the\\nPalmer Archipelago\",\n    caption = \"Data come from the palmerpenguins package.\")"
  },
  {
    "objectID": "R4DS_C1.html#exercise-1.2.5.8",
    "href": "R4DS_C1.html#exercise-1.2.5.8",
    "title": "Chapter 1",
    "section": "Exercise 1.2.5.8",
    "text": "Exercise 1.2.5.8\nRecreate the following visualization. What aesthetic should bill_depth_mm be mapped to? And should it be mapped at the global level or at the geom level?\n8 answer: bill_depth_mm should be mapped to color at the geom_point level so that geom_smooth is displayed as one line\n\npenguins %&gt;% \n  ggplot(aes(flipper_length_mm, body_mass_g)) +\n  geom_point(aes(color = bill_depth_mm), na.rm = TRUE) +\n  geom_smooth(method = loess, formula = y ~ x, na.rm = TRUE) +\n  theme_classic()"
  },
  {
    "objectID": "R4DS_C1.html#exercise-1.2.5.9",
    "href": "R4DS_C1.html#exercise-1.2.5.9",
    "title": "Chapter 1",
    "section": "Exercise 1.2.5.9",
    "text": "Exercise 1.2.5.9\nRun this code in your head and predict what the output will look like. Then, run the code in R and check your predictions.\n9 answer: the x axis will have flipper lengths and the y axis will have body mass. There are three islands, so the graph will have three sets of points color-coded to match the island the penguins are from. There will be three smoothing lines that also correspond to each island, and these lines will not display the confidence intervals.\n\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g, color = island)\n) +\n  geom_point(na.rm = TRUE) +\n  geom_smooth(se = FALSE, na.rm = TRUE, method = loess, formula = y ~ x) +\n  theme_classic()"
  },
  {
    "objectID": "R4DS_C1.html#exercise-1.2.5.10",
    "href": "R4DS_C1.html#exercise-1.2.5.10",
    "title": "Chapter 1",
    "section": "Exercise 1.2.5.10",
    "text": "Exercise 1.2.5.10\nWill these two graphs look different? Why/why not?\n10 answer: no, they will look the same. The first maps aesthetics at the global level whereas the second maps aesthetics at the local level. However, the way the local aesthetics are mapped will produce the same result as the global mapping because the local mappings for both geom_point and geom_smooth are identical.\n\nPlot 1Plot 2\n\n\n\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g)\n) +\n  geom_point(na.rm = TRUE) +\n  geom_smooth(na.rm = TRUE, formula = y ~ x, method = loess) +\n  theme_classic()\n\n\n\n\n\n\n\nggplot() +\n  geom_point(\n    data = penguins,\n    mapping = aes(x = flipper_length_mm, y = body_mass_g), na.rm = TRUE) +\n  geom_smooth(\n    data = penguins,\n    formula = y ~ x,\n    method = loess,\n    mapping = aes(x = flipper_length_mm, y = body_mass_g), na.rm = TRUE) +\n  theme_classic()"
  },
  {
    "objectID": "R4DS_C3.html",
    "href": "R4DS_C3.html",
    "title": "Chapter 3",
    "section": "",
    "text": "Chapter 3 of R4DS teaches data transformation using packages (such as dplyr) within the tidyverse metapackage. This page will work through a subset of the chapter’s prompts. I will use the nycflights13 dataset to go through some basic data cleaning procedures. I’ll set up by loading the tidyverse and nycflights13 packages.\npacman::p_load(tidyverse, nycflights13)"
  },
  {
    "objectID": "R4DS_C3.html#exercise-3.2.5.1",
    "href": "R4DS_C3.html#exercise-3.2.5.1",
    "title": "Chapter 3",
    "section": "Exercise 3.2.5.1",
    "text": "Exercise 3.2.5.1\nIn a single pipeline for each condition, find all flights that meet the condition:\nHad an arrival delay of two or more hours\nAnswer: 10,200 flights had a delay of 2+ hours\n\nflights %&gt;% \n  filter(arr_delay &gt;= 120) %&gt;% \n  count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1 10200\n\n\nFlew to Houston (IAH or HOU)\nAnswer: 9,313 flights flew to Houston\n\nflights %&gt;% \n  filter(dest %in% c(\"IAH\", \"HOU\")) %&gt;% \n  count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1  9313\n\n\nWere operated by United, American, or Delta\nAnswer: 139,504 flights were operated by these airlines\n\nflights %&gt;% \n  filter(carrier %in% c(\"UA\", \"AA\", \"DL\")) %&gt;% \n  count()\n\n# A tibble: 1 × 1\n       n\n   &lt;int&gt;\n1 139504\n\n\nDeparted in summer (July, August, and September)\nAnswer: 86,326 flights left during the summer\n\nflights %&gt;% \n  filter(month %in% c(7, 8, 9)) %&gt;% \n  count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1 86326\n\n\nArrived more than two hours late, but didn’t leave late\nAnswer: 29 flights left on time and arrived 2+ hours late\n\nflights %&gt;% \n  filter(dep_delay &lt;= 0, arr_delay &gt; 120) %&gt;% \n  count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1    29\n\n\nWere delayed by at least an hour, but made up over 30 minutes in flight\nAnswer: 1,844 flights left an hour late but made up 30 minutes in flight\n\nflights %&gt;% \n  filter(dep_delay &gt;= 60 & dep_delay - arr_delay &gt; 30) %&gt;% \n  count()\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1  1844"
  },
  {
    "objectID": "R4DS_C3.html#exercise-3.2.5.2",
    "href": "R4DS_C3.html#exercise-3.2.5.2",
    "title": "Chapter 3",
    "section": "Exercise 3.2.5.2",
    "text": "Exercise 3.2.5.2\nSort flights to find the flights with longest departure delays. Find the flights that left earliest in the morning.\nAnswer: The longest delay was 1,301 minutes and many flights left at 12:01AM.\n\nflights %&gt;% \n  arrange(desc(dep_delay))\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     9      641            900      1301     1242           1530\n 2  2013     6    15     1432           1935      1137     1607           2120\n 3  2013     1    10     1121           1635      1126     1239           1810\n 4  2013     9    20     1139           1845      1014     1457           2210\n 5  2013     7    22      845           1600      1005     1044           1815\n 6  2013     4    10     1100           1900       960     1342           2211\n 7  2013     3    17     2321            810       911      135           1020\n 8  2013     6    27      959           1900       899     1236           2226\n 9  2013     7    22     2257            759       898      121           1026\n10  2013    12     5      756           1700       896     1058           2020\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\nflights %&gt;% \n  arrange(dep_time)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1    13        1           2249        72      108           2357\n 2  2013     1    31        1           2100       181      124           2225\n 3  2013    11    13        1           2359         2      442            440\n 4  2013    12    16        1           2359         2      447            437\n 5  2013    12    20        1           2359         2      430            440\n 6  2013    12    26        1           2359         2      437            440\n 7  2013    12    30        1           2359         2      441            437\n 8  2013     2    11        1           2100       181      111           2225\n 9  2013     2    24        1           2245        76      121           2354\n10  2013     3     8        1           2355         6      431            440\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "R4DS_C3.html#exercise-3.2.5.3",
    "href": "R4DS_C3.html#exercise-3.2.5.3",
    "title": "Chapter 3",
    "section": "Exercise 3.2.5.3",
    "text": "Exercise 3.2.5.3\nSort flights to find the fastest flights. (Hint: Try including a math calculation inside of your function.)\nAnswer: This is a trickier question than it might seem at first. With the coding skills developed in chapters 1-3, the easy solution would be to run the code below on tab 1, which subtracts dep_time from arr_time and then sorts the values in ascending order. I’ve retained the first 5 records for display.\nThe problem with the easy way is that these columns are formatted as numbers, not times, and it generates nonsensical numbers, and sometimes produces negative numbers for flights that land the day after they depart. Look at the values in the flight_time column in tab 1. This method gives us the wrong answer because there are flights with small positive values that are actually the shortest, but we aren’t finding them because we are focusing on flights that are at the top of the list because our simple formula produced negative values.\nIf we do it the hard way, we need to account for the date change. To do this, I created datetime variables for both the departure and the arrival hours and minutes. This requires some modulus math (“%/%” and “%%”) to get the times in a useful format, which is covered in R4DS Chapter 17. Once we have the departure and arrival times in dttm format, we can calculate the time difference (using difftime). We can then correct for instances where a flight lands the next day by revising any flights with negative difftimes, where we would then add one day to the value by adding 86,400 seconds (using if_else logic). Now, we can see the fastest flight in the dataset was 33 minutes.\n\nEasy wayHard way\n\n\n\nflights %&gt;% \n  mutate(flight_time = arr_time - dep_time) %&gt;% \n  arrange(flight_time) %&gt;% \n  slice_head(n = 5) %&gt;% \n  select(year, month, day, dep_time, arr_time, flight_time)\n\n# A tibble: 5 × 6\n   year month   day dep_time arr_time flight_time\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;    &lt;int&gt;       &lt;int&gt;\n1  2013     7    17     2400       54       -2346\n2  2013    12     9     2400       59       -2341\n3  2013     6    12     2338       17       -2321\n4  2013    12    29     2332       14       -2318\n5  2013    11     6     2335       18       -2317\n\n\n\n\n\nflights %&gt;%\n  mutate(\n    dep_hour = dep_time %/% 100, #modulus math to obtain hour\n    dep_minute = dep_time %% 100,#modulus math to obtain minute\n    arr_hour = arr_time %/% 100, #modulus math to obtain hour\n    arr_minute = arr_time %% 100 #modulus math to obtain minute\n  ) %&gt;%\n  mutate(departure_time_proper = as.POSIXct( #make dttm departure variable\n    make_datetime(year,\n                  month,\n                  day,\n                  dep_hour,\n                  dep_minute)\n    ),\n    arrival_time_proper = as.POSIXct( #make dttm arrival variable\n    make_datetime(year,\n                  month,\n                  day,\n                  arr_hour,\n                  arr_minute)\n    )) %&gt;% \n  #calculate difference between departure and arrival\n  mutate(difftime_pre = difftime(arrival_time_proper, \n                                 departure_time_proper),\n         # then correct negative flight times by adding one day to flights\n         #that landed a day after they departed;\n         #note one day is equal to 86,400 seconds\n         arr_time_next_day_correction = if_else(difftime_pre &lt; 0, \n                                                arrival_time_proper + 86400,\n                                                arrival_time_proper),\n         #create revised difftime that accounts for flights landing next day\n         difftime_post = difftime(arr_time_next_day_correction, departure_time_proper)) %&gt;% \n  arrange(difftime_post) %&gt;% #sort by shortest flights\n  slice_head(n = 5) %&gt;% #keep 5 fastest flights for viewing purposes\n  relocate(year, month, day, dep_time, arr_time, difftime_post, .before = 1)\n\n# A tibble: 5 × 28\n   year month   day dep_time arr_time difftime_post sched_dep_time dep_delay\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;    &lt;int&gt; &lt;drtn&gt;                 &lt;int&gt;     &lt;dbl&gt;\n1  2013     8    14     1133     1206 33 mins                 1148       -15\n2  2013     1     5     1323     1358 35 mins                 1325        -2\n3  2013     2    22     1312     1347 35 mins                 1316        -4\n4  2013     9     3     1203     1238 35 mins                 1153        10\n5  2013     3    19     1455     1531 36 mins                 1329        86\n# ℹ 20 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,\n#   distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;, dep_hour &lt;dbl&gt;,\n#   dep_minute &lt;dbl&gt;, arr_hour &lt;dbl&gt;, arr_minute &lt;dbl&gt;,\n#   departure_time_proper &lt;dttm&gt;, arrival_time_proper &lt;dttm&gt;,\n#   difftime_pre &lt;drtn&gt;, arr_time_next_day_correction &lt;dttm&gt;"
  },
  {
    "objectID": "R4DS_C3.html#exercise-3.2.5.4",
    "href": "R4DS_C3.html#exercise-3.2.5.4",
    "title": "Chapter 3",
    "section": "Exercise 3.2.5.4",
    "text": "Exercise 3.2.5.4\nWas there a flight on every day of 2013?\n4 answer: yes, there was a flight everyday in 2013. You can take a variety of approaches to solve this question. Here are two:\n\nMethod 1Method 2\n\n\nBelow we see a list of flights with unique dates each month. We can skim through each month and see that there are flights everyday of the year, because the number of unique flight dates matches the number of days in each calendar month.\nNote 2013 is not a leap year, so having 28 unique flight dates in February is consistent with there being 28 calendar days in the month that year.\n\nflights %&gt;% \n  distinct(month, day) %&gt;% \n  group_by(month) %&gt;% \n  count()\n\n# A tibble: 12 × 2\n# Groups:   month [12]\n   month     n\n   &lt;int&gt; &lt;int&gt;\n 1     1    31\n 2     2    28\n 3     3    31\n 4     4    30\n 5     5    31\n 6     6    30\n 7     7    31\n 8     8    31\n 9     9    30\n10    10    31\n11    11    30\n12    12    31\n\n\n\n\nWe can create a vector of dates ranging from 1/1/2013 - 12/31/2013. Then we can group the flight data by dates, select the first flight on each date, and join that record to the corresponding date in the date vector. We can then create a logical variable that tells us if each date does or does not have a corresponding flight record. Then we can summarize the logical variable’s values. Since the code below returns n = 365 under “Flights Occurred Today”, and returns no records under “No Flights Today”, we can conclude that there was a flight everyday in 2013.\n\nflights_with_dep_date &lt;- flights %&gt;%\n  mutate(departure_date = as.POSIXct( #make dttm departure variable\n    make_date(year,\n              month,\n              day))) %&gt;% \n  group_by(departure_date) %&gt;% \n  slice_head()\n  \ntibble(seq(as.Date(\"2013/01/01\"), by = \"day\", length.out = 365)) %&gt;% \n  rename(departure_date = 1) %&gt;% \n  left_join(flights_with_dep_date, by = \"departure_date\") %&gt;% \n  mutate(date_validation = if_else(is.na(day), \"No Flights Today\", \"Flights Occurred Today\")) %&gt;% \n  group_by(date_validation) %&gt;% \n  summarize(n = n())\n\n# A tibble: 1 × 2\n  date_validation            n\n  &lt;chr&gt;                  &lt;int&gt;\n1 Flights Occurred Today   365"
  },
  {
    "objectID": "R4DS_C3.html#exercise-3.2.5.5",
    "href": "R4DS_C3.html#exercise-3.2.5.5",
    "title": "Chapter 3",
    "section": "Exercise 3.2.5.5",
    "text": "Exercise 3.2.5.5\nWhich flights traveled the farthest distance? Which traveled the least distance?\n5 answer: flights from JFK (New York) to HNL (Hawaii) had the longest distance, which totaled 4,983 miles. Flights from EWR (New Jersey) to LGA (New York) traveled the shortest distance, which was 17 miles.\n\nflights %&gt;% \n  arrange(desc(distance)) %&gt;% \n  slice_head() %&gt;% \n  select(distance, origin, dest)\n\n# A tibble: 1 × 3\n  distance origin dest \n     &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;\n1     4983 JFK    HNL  \n\nflights %&gt;% \n  arrange(distance) %&gt;% \n  slice_head() %&gt;% \n  select(distance, origin, dest)\n\n# A tibble: 1 × 3\n  distance origin dest \n     &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;\n1       17 EWR    LGA"
  },
  {
    "objectID": "R4DS_C3.html#exercise-3.2.5.6",
    "href": "R4DS_C3.html#exercise-3.2.5.6",
    "title": "Chapter 3",
    "section": "Exercise 3.2.5.6",
    "text": "Exercise 3.2.5.6\nDoes it matter what order you used filter() and arrange() if you’re using both? Why/why not? Think about the results and how much work the functions would have to do.\n6 answer: No it does not matter because filter changes the rows that are present while arrange changes the order of the rows. You can do them in either order and the results will be the same."
  },
  {
    "objectID": "R4DS_C1.html#exercise-1.4.3.1",
    "href": "R4DS_C1.html#exercise-1.4.3.1",
    "title": "Chapter 1",
    "section": "Exercise 1.4.3.1",
    "text": "Exercise 1.4.3.1\nMake a bar plot of species of penguins, where you assign species to the y aesthetic. How is this plot different?\n1 answer: the bars are horizontal as opposed to vertical.\n\nggplot(penguins, aes(y = species, fill = species)) +\n  geom_bar() +\n  theme_classic()"
  },
  {
    "objectID": "R4DS_C1.html#exercise-4.1.3.2",
    "href": "R4DS_C1.html#exercise-4.1.3.2",
    "title": "Chapter 1",
    "section": "Exercise 4.1.3.2",
    "text": "Exercise 4.1.3.2\nHow are the following two plots different? Which aesthetic, color or fill, is more useful for changing the color of bars?\n2 answer: color is applied to the outline of the bars whereas fill applies to the entire bar except the outline. For this graph, filling is more useful for changing the color of the bars.\n\nPlot 1Plot 2\n\n\n\nggplot(penguins, aes(x = species)) +\n  geom_bar(color = \"red\")\n\n\n\n\n\n\n\nggplot(penguins, aes(x = species)) +\n  geom_bar(fill = \"red\")"
  },
  {
    "objectID": "R4DS_C1.html#exercise-4.1.3.3",
    "href": "R4DS_C1.html#exercise-4.1.3.3",
    "title": "Chapter 1",
    "section": "Exercise 4.1.3.3",
    "text": "Exercise 4.1.3.3\n3 What does the bins argument in geom_histogram() do?\n3 answer: this argument specifies how many units of the x variable will be encompassed by 1 bar. Larger bins results in fewer bars in the histogram.\n\nplot_4.1.3.3a &lt;- ggplot(penguins, aes(x = flipper_length_mm)) +\n  geom_histogram(\n    binwidth = 3,\n    fill = \"firebrick2\",\n    color = \"black\",\n    alpha = 0.75,\n    na.rm = TRUE\n  ) +\n  labs(\n    x = \"Flipper length\")\n\nplot_4.1.3.3b &lt;- ggplot(penguins, aes(x = flipper_length_mm)) +\n  geom_histogram(\n    binwidth = 6,\n    fill = \"firebrick2\",\n    color = \"black\",\n    alpha = 0.75,\n    na.rm = TRUE\n  ) +\n  labs(\n    x = \"Flipper length\")\n\ngrid.arrange(plot_4.1.3.3a, plot_4.1.3.3b, ncol = 2)\n\n\n\n\n\n# #4 Make a histogram of the carat variable in the diamonds dataset that is available when you load the tidyverse package. Experiment with different binwidths. What binwidth reveals the most interesting patterns?\n# \n# summary(diamonds$carat)\n# #x var ranges 0.2 to 5.01, useful for considering appropriate binwidth\n# \n# ggplot(diamonds, aes(x = carat)) +\n#   geom_histogram(\n#     binwidth = 0.05,\n#     fill = \"aquamarine\",\n#     color = \"black\",\n#     alpha = 0.75,\n#     na.rm = TRUE\n#   )\n# \n# ggplot(diamonds, aes(x = carat)) +\n#   geom_histogram(\n#     binwidth = 0.25,\n#     fill = \"lightcoral\",\n#     color = \"black\",\n#     alpha = 0.75,\n#     na.rm = TRUE\n#   )\n# \n# ggplot(diamonds, aes(x = carat)) +\n#   geom_histogram(\n#     binwidth = 0.40,\n#     fill = \"chartreuse\",\n#     color = \"black\",\n#     alpha = 0.75,\n#     na.rm = TRUE\n#   )\n# \n# #the 0.05 binwidth reveals an interesting pattern of clustering around whole numbers, such as carats of 1 and 2.\n# \n# #2.5.5 Exercises####\n# \n# #1 The mpg data frame that is bundled with the ggplot2 package contains 234 observations collected by the US Environmental Protection Agency on 38 car models. Which variables in mpg are categorical? Which variables are numerical? (Hint: Type ?mpg to read the documentation for the dataset.) How can you see this information when you run mpg?\n# \n# ?mpg\n# glimpse(mpg)\n# \n# #answer: categorical variables: manufacturer, model name, trans, drv, fl, class\n# #numerical variables: displ, year, cyl, cty, hwy\n# \n# #2 Make a scatterplot of hwy vs. displ using the mpg data frame. Next, map a third, numerical variable to color, then size, then both color and size, then shape. How do these aesthetics behave differently for categorical vs. numerical variables?\n# \n# ggplot(mpg, aes(displ, hwy)) +\n#   geom_point()\n# \n# ggplot(mpg, aes(displ, hwy, color = cty)) +\n#   geom_point()\n# \n# ggplot(mpg, aes(displ, hwy, size = cty)) +\n#   geom_point()\n# \n# ggplot(mpg, aes(displ, hwy, color = cty, size = cty)) +\n#   geom_point()\n# \n# #ggplot(mpg, aes(displ, hwy, shape = cty)) +\n# #  geom_point()\n# \n# #answer: color gradiants and sizes can accomodate continuous variables but shapes cannot because there are only so many shapes. The shapes option is suited for categorical variables.\n# \n# #3 In the scatterplot of hwy vs. displ, what happens if you map a third variable to linewidth?\n# \n# ggplot(mpg, aes(hwy, displ, linewidth = cty)) +\n#   geom_point()\n# \n# #answer: nothing happens when this is done with a scatterplot, because linewidth applies to geom_lines.\n# \n# ggplot(mpg, aes(hwy, displ, linewidth = cty)) +\n#   geom_line()\n# \n# #4 What happens if you map the same variable to multiple aesthetics?\n# \n# ggplot(mpg, aes(\n#   hwy,\n#   displ,\n#   color = cty,\n#   fill = cty,\n#   size = cty\n# )) +\n#   geom_point()\n# \n# #answer: then the points are modified in multiple ways in accordance with that variable. Above, cty impacts both the size and the color of. the points. For example, low \"cty\" values are darker and smaller, while high \"cty\" values are lighter and larger.\n# \n# #5 Make a scatterplot of bill_depth_mm vs. bill_length_mm and color the points by species. What does adding coloring by species reveal about the relationship between these two variables? What about faceting by species?\n# \n# ggplot(penguins, aes(bill_length_mm, bill_depth_mm, color = species)) +\n#   geom_point()\n# \n# ggplot(penguins, aes(bill_length_mm, bill_depth_mm, color = species)) +\n#   geom_point() +\n#   facet_wrap( ~ species)\n# \n# #answer: Adelie species has smaller lengths and higher depths, whereas Gento species has larger lengths and smaller depths. Chinstrap species has depths similar to Adelie and lengths similar to Gentoo. Faceting by species shows the same thing but is just an alternative way to visualize this relationship.\n# \n# #6 Why does the following yield two separate legends? How would you fix it to combine the two legends?\n# \n# ggplot(\n#   data = penguins,\n#   mapping = aes(\n#     x = bill_length_mm,\n#     y = bill_depth_mm,\n#     color = species,\n#     shape = species\n#   )\n# ) +\n#   geom_point() +\n#   labs(color = \"Species\", shape = \"Species\")\n# \n# #answer: there is a legend for color and a legend for shape. This could be fixed by adding labs() mapping both color and shape to species\n# \n# #7 Create the two following stacked bar plots. Which question can you answer with the first one? Which question can you answer with the second one?\n# \n# ggplot(penguins, aes(x = island, fill = species)) +\n#   geom_bar(position = \"fill\")\n# \n# #answer: what is the composition of penguin species by island? For example, what portion of penguins on Biscoe are Gentoo? Approximately 75%.\n# \n# ggplot(penguins, aes(x = species, fill = island)) +\n#   geom_bar(position = \"fill\")\n# \n# #answer: How much of each species is concentrated on each island? For example, what portion of Adelie penguins are located on Torgensen? Approximately 30%.\n# \n# #2.6.1 Exercises####\n# \n# #1 Run the following lines of code. Which of the two plots is saved as mpg-plot.png? Why?\n# \n# ggplot(mpg, aes(x = class)) +\n#   geom_bar()\n# \n# ggplot(mpg, aes(x = cty, y = hwy)) +\n#   geom_point()\n# \n# ggsave(\"mpg-plot.png\")\n# \n# #answer: the second plot is saved because ggsave saves the last plot made.\n# \n# #2 What do you need to change in the code above to save the plot as a PDF instead of a PNG? How could you find out what types of image files would work in ggsave()?\n# \n# #answer: change the file type to pdf within quotes. You can find out what other file types are possible using ?ggsave\n# \n# ggsave(\"mpg-plot.pdf\")\n# \n# ?ggsave\n# #Device to use. Can either be a device function (e.g. png), or one of \"eps\", \"ps\", \"tex\" (pictex), \"pdf\", \"jpeg\", \"tiff\", \"png\", \"bmp\", \"svg\" or \"wmf\" (windows only)."
  },
  {
    "objectID": "R4DS_C1.html#exercise-1.4.3.2",
    "href": "R4DS_C1.html#exercise-1.4.3.2",
    "title": "Chapter 1",
    "section": "Exercise 1.4.3.2",
    "text": "Exercise 1.4.3.2\nHow are the following two plots different? Which aesthetic, color or fill, is more useful for changing the color of bars?\n2 answer: color is applied to the outline of the bars whereas fill applies to the entire bar except the outline. For this graph, filling is more useful for changing the color of the bars.\n\nPlot 1Plot 2\n\n\n\nggplot(penguins, aes(x = species)) +\n  geom_bar(color = \"red\") +\n  theme_classic()\n\n\n\n\n\n\n\nggplot(penguins, aes(x = species)) +\n  geom_bar(fill = \"red\") +\n  theme_classic()"
  },
  {
    "objectID": "R4DS_C1.html#exercise-1.4.3.3",
    "href": "R4DS_C1.html#exercise-1.4.3.3",
    "title": "Chapter 1",
    "section": "Exercise 1.4.3.3",
    "text": "Exercise 1.4.3.3\n3 What does the bins argument in geom_histogram() do?\n3 answer: this argument specifies the number of bins(bars) included in the histogram.\n\nplot_4.1.3.3a &lt;- ggplot(penguins, aes(x = flipper_length_mm)) +\n  geom_histogram(\n    bins = 5,\n    fill = \"firebrick2\",\n    color = \"black\",\n    alpha = 0.75,\n    na.rm = TRUE\n  ) +\n  labs(\n    x = \"Flipper length\") +\n  theme_classic()\n\nplot_4.1.3.3b &lt;- ggplot(penguins, aes(x = flipper_length_mm)) +\n  geom_histogram(\n    bins = 10,\n    fill = \"firebrick2\",\n    color = \"black\",\n    alpha = 0.75,\n    na.rm = TRUE\n  ) +\n  labs(\n    x = \"Flipper length\") +\n  theme_classic()\n\ngrid.arrange(plot_4.1.3.3a, plot_4.1.3.3b, ncol = 2)\n\n\n\n\n##Exercise 1.4.3.4\nMake a histogram of the carat variable in the diamonds dataset that is available when you load the tidyverse package. Experiment with different binwidths. What binwidth reveals the most interesting patterns?\n4 answer: the 0.05 binwidth reveals an interesting pattern of clustering around whole and half numbers, such as carats of 1.5 and 2.\n\nPlot 1Plot 2Plot 3\n\n\n\nsummary(diamonds$carat)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.2000  0.4000  0.7000  0.7979  1.0400  5.0100 \n\n#x var ranges 0.2 to 5.01, useful for considering appropriate binwidth\n\nggplot(diamonds, aes(x = carat)) +\n  geom_histogram(\n    binwidth = 0.40,\n    fill = \"chartreuse\",\n    color = \"black\",\n    alpha = 0.75,\n    na.rm = TRUE\n  ) +\n  theme_classic()\n\n\n\n\n\n\n\nggplot(diamonds, aes(x = carat)) +\n  geom_histogram(\n    binwidth = 0.25,\n    fill = \"lightcoral\",\n    color = \"black\",\n    alpha = 0.75,\n    na.rm = TRUE\n  ) +\n  theme_classic()\n\n\n\n\n\n\n\nggplot(diamonds, aes(x = carat)) +\n  geom_histogram(\n    binwidth = 0.05,\n    fill = \"aquamarine\",\n    color = \"black\",\n    alpha = 0.75,\n    na.rm = TRUE\n  ) +\n  theme_classic()"
  },
  {
    "objectID": "R4DS_C1.html#exercise-1.5.5.1",
    "href": "R4DS_C1.html#exercise-1.5.5.1",
    "title": "Chapter 1",
    "section": "Exercise 1.5.5.1",
    "text": "Exercise 1.5.5.1\n1 The mpg data frame that is bundled with the ggplot2 package contains 234 observations collected by the US Environmental Protection Agency on 38 car models. Which variables in mpg are categorical? Which variables are numerical? (Hint: Type ?mpg to read the documentation for the dataset.) How can you see this information when you run mpg?\n1 answer:\ncategorical variables: manufacturer, model name, trans, drv, fl, class\nnumerical variables: displ, year, cyl, cty, hwy\n\n# ?mpg\nglimpse(mpg)\n\nRows: 234\nColumns: 11\n$ manufacturer &lt;chr&gt; \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"…\n$ model        &lt;chr&gt; \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4 quattro\", \"…\n$ displ        &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.…\n$ year         &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200…\n$ cyl          &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, …\n$ trans        &lt;chr&gt; \"auto(l5)\", \"manual(m5)\", \"manual(m6)\", \"auto(av)\", \"auto…\n$ drv          &lt;chr&gt; \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"4\", \"4\", \"4\", \"4\", \"4…\n$ cty          &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1…\n$ hwy          &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2…\n$ fl           &lt;chr&gt; \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p…\n$ class        &lt;chr&gt; \"compact\", \"compact\", \"compact\", \"compact\", \"compact\", \"c…"
  },
  {
    "objectID": "R4DS_C1.html#exercise-1.5.5.2",
    "href": "R4DS_C1.html#exercise-1.5.5.2",
    "title": "Chapter 1",
    "section": "Exercise 1.5.5.2",
    "text": "Exercise 1.5.5.2\nMake a scatterplot of hwy vs. displ using the mpg data frame. Next, map a third, numerical variable to color, then size, then both color and size, then shape. How do these aesthetics behave differently for categorical vs. numerical variables?\n2 answer: color gradiants and sizes can accomodate continuous variables but shapes cannot because there are only so many shapes. The shapes option is suited for categorical variables. Making a GGPLOT that assigns shape to a continuous variables will generate an error.\n\nplot_2.5.5.2a &lt;- ggplot(mpg, aes(displ, hwy)) +\n  geom_point() +\n  theme_classic()\n\nplot_2.5.5.2b &lt;- ggplot(mpg, aes(displ, hwy, color = cty)) +\n  geom_point() +\n  theme_classic()\n\nplot_2.5.5.2c &lt;- ggplot(mpg, aes(displ, hwy, size = cty)) +\n  geom_point() +\n  theme_classic()\n\nplot_2.5.5.2d &lt;- ggplot(mpg, aes(displ, hwy, color = cty, size = cty)) +\n  geom_point() +\n  theme_classic()\n\n# ggplot(mpg, aes(displ, hwy, shape = cty)) +\n#  geom_point()\n\ngrid.arrange(plot_2.5.5.2a, plot_2.5.5.2b, plot_2.5.5.2c, plot_2.5.5.2d, nrow = 2, ncol = 2)"
  },
  {
    "objectID": "R4DS_C1.html#exercise-1.5.5.3",
    "href": "R4DS_C1.html#exercise-1.5.5.3",
    "title": "Chapter 1",
    "section": "Exercise 1.5.5.3",
    "text": "Exercise 1.5.5.3\nIn the scatterplot of hwy vs. displ, what happens if you map a third variable to linewidth?\n3 answer: nothing happens when this is done with a scatterplot, because linewidth applies to geom_lines.\n\nggplot(mpg, aes(hwy, displ, linewidth = cty)) +\n  geom_point() +\n  theme_classic()"
  },
  {
    "objectID": "R4DS_C1.html#exercise-1.5.5.5",
    "href": "R4DS_C1.html#exercise-1.5.5.5",
    "title": "Chapter 1",
    "section": "Exercise 1.5.5.5",
    "text": "Exercise 1.5.5.5\nMake a scatterplot of bill_depth_mm vs. bill_length_mm and color the points by species. What does adding coloring by species reveal about the relationship between these two variables? What about faceting by species?\n5 answer: Adelie species has smaller lengths and higher depths, whereas Gentoo species has larger lengths and smaller depths. The Chinstrap species has depths similar to Adelie and lengths similar to Gentoo. Faceting by species shows the same thing but is just an alternative way to visualize this relationship.\n\nPlot 1Plot 2\n\n\n\nggplot(penguins, aes(bill_depth_mm, bill_length_mm, color = species)) +\n  geom_point(na.rm = TRUE) +\n  theme_classic() +\n  labs(\n    title = \"Relationship Between Bill Length and Depth by Species\",\n    x = \"Bill depth\",\n    y = \"Bill length\"\n  )\n\n\n\n\n\n\n\nggplot(penguins, aes(bill_depth_mm, bill_length_mm, color = species)) +\n  geom_point(na.rm = TRUE) +\n  facet_wrap( ~ species) +\n  theme_classic() +\n  labs(\n    title = \"Relationship Between Bill Length and Depth by Species\",\n    x = \"Bill depth\",\n    y = \"Bill length\"\n  )"
  },
  {
    "objectID": "R4DS_C1.html#exercise-1.5.5.4",
    "href": "R4DS_C1.html#exercise-1.5.5.4",
    "title": "Chapter 1",
    "section": "Exercise 1.5.5.4",
    "text": "Exercise 1.5.5.4\nWhat happens if you map the same variable to multiple aesthetics?\n4 answer: the points are modified in multiple ways. Below, “cty” impacts both the size and the color of the points. For example, low “cty” values are darker and smaller, while high “cty” values are lighter and larger.\n\nggplot(mpg, aes(\n  hwy,\n  displ,\n  color = cty,\n  size = cty\n)) +\n  geom_point() +\n  theme_classic()"
  },
  {
    "objectID": "R4DS_C1.html#exercise-1.5.5.6",
    "href": "R4DS_C1.html#exercise-1.5.5.6",
    "title": "Chapter 1",
    "section": "Exercise 1.5.5.6",
    "text": "Exercise 1.5.5.6\nWhy does the following yield two separate legends? How would you fix it to combine the two legends?\n6 answer: there is a legend for color and a legend for shape. This could be fixed by adding labs() mapping both color and shape to species\n\nggplot(\n  data = penguins,\n  mapping = aes(\n    x = bill_length_mm,\n    y = bill_depth_mm,\n    color = species,\n    shape = species\n  )\n) +\n  geom_point(na.rm = TRUE) +\n  labs(\n    color = \"Species\",\n    shape = \"Species\",\n        title = \"Relationship Between Bill Length and Depth by Species\",\n    x = \"Bill depth\",\n    y = \"Bill length\") +\n  theme_classic()"
  },
  {
    "objectID": "R4DS_C1.html#exercise-1.5.5.7",
    "href": "R4DS_C1.html#exercise-1.5.5.7",
    "title": "Chapter 1",
    "section": "Exercise 1.5.5.7",
    "text": "Exercise 1.5.5.7\nCreate the two following stacked bar plots. Which question can you answer with the first one? Which question can you answer with the second one?\n\nPlot 1 answer:Plot 2 answer:\n\n\nFor the first graph, you could answer a question such as “what is the composition of penguin species by island?” For example, approximately 75% of the penguins on Biscoe are part of the Gentoo species.\n\nggplot(penguins, aes(x = island, fill = species)) +\n  geom_bar(position = \"fill\") +\n  theme_classic()\n\n\n\n\n\n\nFor the second graph, you could answer a question such as “how much of each species is concentrated on each island?” For example, approximately 30% of Adelie penguins are located on Torgensen.\n\nggplot(penguins, aes(x = species, fill = island)) +\n  geom_bar(position = \"fill\") +\n  theme_classic()"
  },
  {
    "objectID": "R4DS_C1.html#exercise-1.6.1.1",
    "href": "R4DS_C1.html#exercise-1.6.1.1",
    "title": "Chapter 1",
    "section": "Exercise 1.6.1.1",
    "text": "Exercise 1.6.1.1\nRun the following lines of code. Which of the two plots is saved as mpg-plot.png? Why?\n1 answer: the second plot was saved because ggsave saves the last plot made.\n\nggplot(mpg, aes(x = fct_rev(fct_infreq(class)), fill = fct_rev(fct_infreq(class)))) +\n  geom_bar() +\n  scale_fill_brewer(palette = \"Dark2\") +\n  theme_classic() + \n  labs(\n    title = \"Count of Vehicles in Each Class\",\n    x = \"Vehicle Class\",\n    y = \"Vehicle Count\",\n    fill = \"Legend\"\n  )\n\n\n\nggplot(mpg, aes(x = cty, y = hwy)) +\n  geom_point() +\n  theme_classic() +\n  labs(\n    x = \"City MPG\",\n    y = \"Highway MPG\",\n    title = \"City vs. Highway MPG\"\n  )\n\n\n\nggsave(\"./output/mpg-plot.png\")\n\nSaving 7 x 5 in image"
  },
  {
    "objectID": "R4DS_C1.html#exercise-1.6.1.2",
    "href": "R4DS_C1.html#exercise-1.6.1.2",
    "title": "Chapter 1",
    "section": "Exercise 1.6.1.2",
    "text": "Exercise 1.6.1.2\nWhat do you need to change in the code above to save the plot as a PDF instead of a PNG? How could you find out what types of image files would work in ggsave()?\n2 answer: change the file type to pdf within quotes. You can find out what other file types are possible using ?ggsave\n\nggsave(\"./output/mpg-plot.pdf\")\n\nSaving 7 x 5 in image\n\n# ?ggsave\n# Device to use. Can either be a device function (e.g. png), or one of \"eps\", \"ps\", \"tex\" (pictex), \"pdf\", \"jpeg\", \"tiff\", \"png\", \"bmp\", \"svg\" or \"wmf\" (windows only)."
  },
  {
    "objectID": "R4DS_C2.html",
    "href": "R4DS_C2.html",
    "title": "Chapter 2",
    "section": "",
    "text": "Chapter 2 of R4DS covers coding basics such as how to create objects, vectors, and comments. Its exercises emphasize the importance of correct spelling and syntax. This page will work through Chapter 2’s prompts."
  },
  {
    "objectID": "R4DS_C2.html#exercise-2.5.1",
    "href": "R4DS_C2.html#exercise-2.5.1",
    "title": "Chapter 2",
    "section": "Exercise 2.5.1",
    "text": "Exercise 2.5.1\nWhy does this code not work?\n1 answer: because the “i” in the 1st line is different than the 2nd line\n\nmy_variable &lt;- 10\n#my_varıable\n\n#Fix by using:\nmy_variable\n\n[1] 10"
  },
  {
    "objectID": "R4DS_C2.html#exercise-2.5.2",
    "href": "R4DS_C2.html#exercise-2.5.2",
    "title": "Chapter 2",
    "section": "Exercise 2.5.2",
    "text": "Exercise 2.5.2\nTweak each of the following R commands so that they run correctly:\n\n# libary(todyverse)\n\n# ggplot(dTA = mpg) +\n#  geom_point(maping = aes(x = displ y = hwy)) +\n#  geom_smooth(method = \"lm)\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nggplot(data = mpg, aes(x = displ, y = hwy)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", formula = y ~ x) +\n  theme_classic() +\n  labs(\n    x = \"Engine Displacement\",\n    y = \"Highway MPG\")"
  },
  {
    "objectID": "R4DS_C3.html#exercise-3.3.5.1",
    "href": "R4DS_C3.html#exercise-3.3.5.1",
    "title": "Chapter 3",
    "section": "Exercise 3.3.5.1",
    "text": "Exercise 3.3.5.1\nCompare dep_time, sched_dep_time, and dep_delay. How would you expect those three numbers to be related?\n1 answer: sched_dep_time is the time the flight was scheduled to leave while dep_time is when the flight actually departed. dep_delay is the difference between dep_time and sched_dep_time."
  },
  {
    "objectID": "R4DS_C3.html#exercise-3.3.5.2",
    "href": "R4DS_C3.html#exercise-3.3.5.2",
    "title": "Chapter 3",
    "section": "Exercise 3.3.5.2",
    "text": "Exercise 3.3.5.2\nBrainstorm as many ways as possible to select dep_time, dep_delay, arr_time, and arr_delay from flights.\n2 answer: here are 4 ways complete this task:\n\nflights %&gt;% \n  select(dep_time, dep_delay, arr_time, arr_delay)\n\n# A tibble: 336,776 × 4\n   dep_time dep_delay arr_time arr_delay\n      &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1      517         2      830        11\n 2      533         4      850        20\n 3      542         2      923        33\n 4      544        -1     1004       -18\n 5      554        -6      812       -25\n 6      554        -4      740        12\n 7      555        -5      913        19\n 8      557        -3      709       -14\n 9      557        -3      838        -8\n10      558        -2      753         8\n# ℹ 336,766 more rows\n\nflights %&gt;% select(starts_with(\"dep\") | starts_with(\"arr\"))\n\n# A tibble: 336,776 × 4\n   dep_time dep_delay arr_time arr_delay\n      &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1      517         2      830        11\n 2      533         4      850        20\n 3      542         2      923        33\n 4      544        -1     1004       -18\n 5      554        -6      812       -25\n 6      554        -4      740        12\n 7      555        -5      913        19\n 8      557        -3      709       -14\n 9      557        -3      838        -8\n10      558        -2      753         8\n# ℹ 336,766 more rows\n\nflights %&gt;% \n  select(ends_with(\"_time\") | ends_with(\"delay\")) %&gt;% \n  select(!starts_with(\"sched\") & !starts_with(\"air\"))\n\n# A tibble: 336,776 × 4\n   dep_time arr_time dep_delay arr_delay\n      &lt;int&gt;    &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1      517      830         2        11\n 2      533      850         4        20\n 3      542      923         2        33\n 4      544     1004        -1       -18\n 5      554      812        -6       -25\n 6      554      740        -4        12\n 7      555      913        -5        19\n 8      557      709        -3       -14\n 9      557      838        -3        -8\n10      558      753        -2         8\n# ℹ 336,766 more rows\n\nflights %&gt;% \n  select(!year:day & !sched_dep_time & !sched_arr_time & !carrier:time_hour)\n\n# A tibble: 336,776 × 4\n   dep_time dep_delay arr_time arr_delay\n      &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1      517         2      830        11\n 2      533         4      850        20\n 3      542         2      923        33\n 4      544        -1     1004       -18\n 5      554        -6      812       -25\n 6      554        -4      740        12\n 7      555        -5      913        19\n 8      557        -3      709       -14\n 9      557        -3      838        -8\n10      558        -2      753         8\n# ℹ 336,766 more rows"
  },
  {
    "objectID": "R4DS_C3.html#exercise-3.3.5.3",
    "href": "R4DS_C3.html#exercise-3.3.5.3",
    "title": "Chapter 3",
    "section": "Exercise 3.3.5.3",
    "text": "Exercise 3.3.5.3\nWhat happens if you specify the name of the same variable multiple times in a select() call?\n3 answer: that variable only shows up in one column regardless, this does not produce an error or cause it to be selected twice.\n\nflights %&gt;% \n  select(year, year)\n\n# A tibble: 336,776 × 1\n    year\n   &lt;int&gt;\n 1  2013\n 2  2013\n 3  2013\n 4  2013\n 5  2013\n 6  2013\n 7  2013\n 8  2013\n 9  2013\n10  2013\n# ℹ 336,766 more rows"
  },
  {
    "objectID": "R4DS_C3.html#exercise-3.3.5.4",
    "href": "R4DS_C3.html#exercise-3.3.5.4",
    "title": "Chapter 3",
    "section": "Exercise 3.3.5.4",
    "text": "Exercise 3.3.5.4\nWhat does the any_of() function do? Why might it be helpful in conjunction with this vector?\n4 answer: it is a selection helper that allows us to select any variables with names matching those listed in the vector. It is similar to the “all_of” selection helper, but unlike “all_of”, it won’t generate an error if any element of the vector is missing from the dataset.\n\nvariables &lt;- c(\"year\", \"month\", \"day\", \"dep_delay\", \"arr_delay\")\n\nflights %&gt;% \n  select(all_of(variables))\n\n# A tibble: 336,776 × 5\n    year month   day dep_delay arr_delay\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1  2013     1     1         2        11\n 2  2013     1     1         4        20\n 3  2013     1     1         2        33\n 4  2013     1     1        -1       -18\n 5  2013     1     1        -6       -25\n 6  2013     1     1        -4        12\n 7  2013     1     1        -5        19\n 8  2013     1     1        -3       -14\n 9  2013     1     1        -3        -8\n10  2013     1     1        -2         8\n# ℹ 336,766 more rows"
  },
  {
    "objectID": "R4DS_C3.html#exercise-3.3.5.5",
    "href": "R4DS_C3.html#exercise-3.3.5.5",
    "title": "Chapter 3",
    "section": "Exercise 3.3.5.5",
    "text": "Exercise 3.3.5.5\nDoes the result of running the following code surprise you? How do the select helpers deal with upper and lower case by default? How can you change that default?\n5 answer: selection helpers in dplyr have ignore.case set to TRUE, meaning case will be ignored when searching for variable names that match the specified string. The default can be changed by setting ignore.case to FALSE.\n\nflights %&gt;% select(contains(\"TIME\"))\n\n# A tibble: 336,776 × 6\n   dep_time sched_dep_time arr_time sched_arr_time air_time time_hour          \n      &lt;int&gt;          &lt;int&gt;    &lt;int&gt;          &lt;int&gt;    &lt;dbl&gt; &lt;dttm&gt;             \n 1      517            515      830            819      227 2013-01-01 05:00:00\n 2      533            529      850            830      227 2013-01-01 05:00:00\n 3      542            540      923            850      160 2013-01-01 05:00:00\n 4      544            545     1004           1022      183 2013-01-01 05:00:00\n 5      554            600      812            837      116 2013-01-01 06:00:00\n 6      554            558      740            728      150 2013-01-01 05:00:00\n 7      555            600      913            854      158 2013-01-01 06:00:00\n 8      557            600      709            723       53 2013-01-01 06:00:00\n 9      557            600      838            846      140 2013-01-01 06:00:00\n10      558            600      753            745      138 2013-01-01 06:00:00\n# ℹ 336,766 more rows\n\nflights %&gt;%  select(contains(\"TIME\", ignore.case = FALSE))\n\n# A tibble: 336,776 × 0"
  },
  {
    "objectID": "R4DS_C3.html#exercise-3.3.5.6",
    "href": "R4DS_C3.html#exercise-3.3.5.6",
    "title": "Chapter 3",
    "section": "Exercise 3.3.5.6",
    "text": "Exercise 3.3.5.6\nRename air_time to air_time_min to indicate units of measurement and move it to the beginning of the data frame.\n\nflights %&gt;% \n  rename(air_time_min = air_time) %&gt;% \n  relocate(air_time_min)\n\n# A tibble: 336,776 × 19\n   air_time_min  year month   day dep_time sched_dep_time dep_delay arr_time\n          &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1          227  2013     1     1      517            515         2      830\n 2          227  2013     1     1      533            529         4      850\n 3          160  2013     1     1      542            540         2      923\n 4          183  2013     1     1      544            545        -1     1004\n 5          116  2013     1     1      554            600        -6      812\n 6          150  2013     1     1      554            558        -4      740\n 7          158  2013     1     1      555            600        -5      913\n 8           53  2013     1     1      557            600        -3      709\n 9          140  2013     1     1      557            600        -3      838\n10          138  2013     1     1      558            600        -2      753\n# ℹ 336,766 more rows\n# ℹ 11 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "R4DS_C3.html#exercise-3.3.5.7",
    "href": "R4DS_C3.html#exercise-3.3.5.7",
    "title": "Chapter 3",
    "section": "Exercise 3.3.5.7",
    "text": "Exercise 3.3.5.7\nWhy doesn’t the following work, and what does the error mean?\n7 answer: the error means that arr_delay is not included in the dataset. This is because selecting tailnum removes every other variable, including arr_delay, from the dataset. This could be revised with the following code:\n\n# flights %&gt;% \n#   select(tailnum) %&gt;% \n#   arrange(arr_delay)\n\nflights %&gt;% \n  select(tailnum, arr_delay) %&gt;% \n  arrange(arr_delay)\n\n# A tibble: 336,776 × 2\n   tailnum arr_delay\n   &lt;chr&gt;       &lt;dbl&gt;\n 1 N843VA        -86\n 2 N840VA        -79\n 3 N851UA        -75\n 4 N3KCAA        -75\n 5 N551AS        -74\n 6 N24212        -73\n 7 N3760C        -71\n 8 N806UA        -71\n 9 N805JB        -71\n10 N855VA        -70\n# ℹ 336,766 more rows"
  },
  {
    "objectID": "R4DS_C3.html#exercise-3.5.7.1",
    "href": "R4DS_C3.html#exercise-3.5.7.1",
    "title": "Chapter 3",
    "section": "Exercise 3.5.7.1",
    "text": "Exercise 3.5.7.1\nWhich carrier has the worst average delays? Challenge: can you disentangle the effects of bad airports vs. bad carriers? Why/why not? (Hint: think about flights |&gt; group_by(carrier, dest) |&gt; summarize(n()))\n1 answer:\n\nflights %&gt;% \n  group_by(origin) %&gt;% \n  summarize(avg_dep_delay = round(mean(dep_delay, na.rm = TRUE),0),\n            avg_arr_delay = round(mean(arr_delay, na.rm = TRUE),0)) %&gt;% \n  arrange(desc(avg_dep_delay))\n\n# A tibble: 3 × 3\n  origin avg_dep_delay avg_arr_delay\n  &lt;chr&gt;          &lt;dbl&gt;         &lt;dbl&gt;\n1 EWR               15             9\n2 JFK               12             6\n3 LGA               10             6\n\nflights %&gt;% \n  group_by(origin) %&gt;% \n  summarize(avg_dep_delay = round(mean(dep_delay, na.rm = TRUE),0),\n            avg_arr_delay =  round(mean(arr_delay, na.rm = TRUE),0)) %&gt;% \n  arrange(desc(avg_dep_delay))\n\n# A tibble: 3 × 3\n  origin avg_dep_delay avg_arr_delay\n  &lt;chr&gt;          &lt;dbl&gt;         &lt;dbl&gt;\n1 EWR               15             9\n2 JFK               12             6\n3 LGA               10             6\n\n\nIt would be difficult to disentangle the effects of carriers vs. airports on delays using summary stats alone. Instead, we could build out a regression model to estimate the effects of carriers on flight delays while controlling for airports. For example:\n\nsummary(flightmodel &lt;- lm(dep_delay ~ carrier + origin, data = flights))\n\n\nCall:\nlm(formula = dep_delay ~ carrier + origin, data = flights)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n -56.11  -17.30  -12.59   -1.81 1296.10 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  17.2682     0.3647  47.345  &lt; 2e-16 ***\ncarrierAA    -7.7497     0.3829 -20.238  &lt; 2e-16 ***\ncarrierAS   -11.4635     1.5416  -7.436 1.04e-13 ***\ncarrierB6    -3.7564     0.3483 -10.785  &lt; 2e-16 ***\ncarrierDL    -7.0538     0.3609 -19.544  &lt; 2e-16 ***\ncarrierEV     2.9580     0.3919   7.547 4.46e-14 ***\ncarrierF9     4.5675     1.5688   2.911   0.0036 ** \ncarrierFL     3.0780     0.7876   3.908 9.31e-05 ***\ncarrierHA   -11.9628     2.1826  -5.481 4.23e-08 ***\ncarrierMQ    -5.5634     0.4074 -13.657  &lt; 2e-16 ***\ncarrierOO    -3.3971     7.4292  -0.457   0.6475    \ncarrierUA    -4.9118     0.3835 -12.809  &lt; 2e-16 ***\ncarrierUS   -12.4002     0.4322 -28.688  &lt; 2e-16 ***\ncarrierVX    -4.1167     0.6365  -6.468 9.98e-11 ***\ncarrierWN     1.2480     0.4969   2.511   0.0120 *  \ncarrierYV     3.3482     1.7464   1.917   0.0552 .  \noriginJFK    -0.4048     0.2322  -1.744   0.0812 .  \noriginLGA    -1.6202     0.2136  -7.586 3.32e-14 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 39.97 on 328503 degrees of freedom\n  (8255 observations deleted due to missingness)\nMultiple R-squared:  0.01216,   Adjusted R-squared:  0.01211 \nF-statistic: 237.9 on 17 and 328503 DF,  p-value: &lt; 2.2e-16\n\n\nWhile overly simplistic, the results of this model show F9 has the largest adverse impact on delays, and this result is statistically significant. EWR is omitted from the output because it is the default category and JFK/LGA coefficients are relative to EWR, but we do see that JFK and LGA are better relative to EWR, as evidenced by the negative coefficients on these variables.\nFind the flights that are most delayed upon departure from each destination.\nHow do delays vary over the course of the day. Illustrate your answer with a plot.\nWhat happens if you supply a negative n to slice_min() and friends?\nExplain what count() does in terms of the dplyr verbs you just learned. What does the sort argument to count() do?\nSuppose we have the following tiny data frame:"
  },
  {
    "objectID": "R4DS_C7.html",
    "href": "R4DS_C7.html",
    "title": "Chapter 7",
    "section": "",
    "text": "Chapter 7 of R4DS teaches how to import a variety of file types into R. This page will work through a subset of the chapter’s prompts. I’ll start by loading the tidyverse and a variety of packages to help us read different file types.\npacman::p_load(readxl, readr, tidyverse)"
  },
  {
    "objectID": "R4DS_C7.html#exercise-7.2.3.1",
    "href": "R4DS_C7.html#exercise-7.2.3.1",
    "title": "Chapter 7",
    "section": "Exercise 7.2.3.1",
    "text": "Exercise 7.2.3.1\nWhat function would you use to read a file where fields were separated with “|”?\n1 answer: this can be done with read_delim(). Firsts, let’s use the sales files in this chapter to create a spreadsheet with fields separated by “|”. Then we can read this file in R using the read_delim() function.\n\nsales_files &lt;- c(\n  \"https://pos.it/r4ds-01-sales\",\n  \"https://pos.it/r4ds-02-sales\",\n  \"https://pos.it/r4ds-03-sales\"\n)\n\nsales &lt;- read_csv(sales_files, id = \"file\", show_col_types = FALSE)\n\nwrite_delim(sales, file = \"./data/sales.csv\", delim = \"|\")\n\nsales_delim &lt;- read_delim(\n \"./data/sales.csv\", delim = \"|\", show_col_types = FALSE)\n\nsales_delim\n\n# A tibble: 19 × 6\n   file                         month     year brand  item     n\n   &lt;chr&gt;                        &lt;chr&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 https://pos.it/r4ds-01-sales January   2019     1  1234     3\n 2 https://pos.it/r4ds-01-sales January   2019     1  8721     9\n 3 https://pos.it/r4ds-01-sales January   2019     1  1822     2\n 4 https://pos.it/r4ds-01-sales January   2019     2  3333     1\n 5 https://pos.it/r4ds-01-sales January   2019     2  2156     9\n 6 https://pos.it/r4ds-01-sales January   2019     2  3987     6\n 7 https://pos.it/r4ds-01-sales January   2019     2  3827     6\n 8 https://pos.it/r4ds-02-sales February  2019     1  1234     8\n 9 https://pos.it/r4ds-02-sales February  2019     1  8721     2\n10 https://pos.it/r4ds-02-sales February  2019     1  1822     3\n11 https://pos.it/r4ds-02-sales February  2019     2  3333     1\n12 https://pos.it/r4ds-02-sales February  2019     2  2156     3\n13 https://pos.it/r4ds-02-sales February  2019     2  3987     6\n14 https://pos.it/r4ds-03-sales March     2019     1  1234     3\n15 https://pos.it/r4ds-03-sales March     2019     1  3627     1\n16 https://pos.it/r4ds-03-sales March     2019     1  8820     3\n17 https://pos.it/r4ds-03-sales March     2019     2  7253     1\n18 https://pos.it/r4ds-03-sales March     2019     2  8766     3\n19 https://pos.it/r4ds-03-sales March     2019     2  8288     6"
  },
  {
    "objectID": "R4DS_C7.html#exercise-7.2.3.2",
    "href": "R4DS_C7.html#exercise-7.2.3.2",
    "title": "Chapter 7",
    "section": "Exercise 7.2.3.2",
    "text": "Exercise 7.2.3.2\nApart from file, skip, and comment, what other arguments do read_csv() and read_tsv() have in common?\n2 answer: according to the help text, all arguments are the same between these two commands, such as col_names, col_types, col_select, ID, etc. We just use read_csv() vs read_tsv() when importing comma delimited files vs. tab delimited files, respectively.\n\n#?read_csv\n#?read_tsv"
  },
  {
    "objectID": "R4DS_C7.html#exercise-7.2.3.3",
    "href": "R4DS_C7.html#exercise-7.2.3.3",
    "title": "Chapter 7",
    "section": "Exercise 7.2.3.3",
    "text": "Exercise 7.2.3.3\nWhat are the most important arguments to read_fwf()?\n3 answer: the most important arguments include file and col_positions. col_positions specifies the width of the fields. Options are fwf_empty(), which guesses width based on the positions of empty columns; fwf_widths(), where you supply the width of columns; fwf_positions(), where you supply paired vectors of start and end positions; and fwf_cols(), where you supply named arguments of paired start and end positions/column widths.\n\n#?read_fwf"
  },
  {
    "objectID": "R4DS_C7.html#exercise-7.2.3.4",
    "href": "R4DS_C7.html#exercise-7.2.3.4",
    "title": "Chapter 7",
    "section": "Exercise 7.2.3.4",
    "text": "Exercise 7.2.3.4\nSometimes strings in a CSV file contain commas. To prevent them from causing problems, they need to be surrounded by a quoting character, like ” or ’. By default, read_csv() assumes that the quoting character will be “. To read the following text into a data frame, what argument to read_csv() do you need to specify?\n4 answer: utilize the quote argument\n\nread_csv(\"x,y\\n1,'a,b'\", quote = \"\\'\", show_col_types = FALSE)\n\n# A tibble: 1 × 2\n      x y    \n  &lt;dbl&gt; &lt;chr&gt;\n1     1 a,b"
  },
  {
    "objectID": "R4DS_C7.html#exercise-7.2.3.5",
    "href": "R4DS_C7.html#exercise-7.2.3.5",
    "title": "Chapter 7",
    "section": "Exercise 7.2.3.5",
    "text": "Exercise 7.2.3.5\nIdentify what is wrong with each of the following inline CSV files. What happens when you run the code?\n5 answer: see each tab below\n\n5a5b5c5d5e\n\n\n\n#original\nsuppressWarnings(\nread_csv(\"a,b\\n1,2,3\\n4,5,6\", show_col_types = FALSE)\n)\n\n# A tibble: 2 × 2\n      a     b\n  &lt;dbl&gt; &lt;dbl&gt;\n1     1    23\n2     4    56\n\n#revision: there was one fewer column than needed; fix this by adding \", c\" below\nread_csv(\"a,b,c\\n1,2,3\\n4,5,6\", show_col_types = FALSE)\n\n# A tibble: 2 × 3\n      a     b     c\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1     2     3\n2     4     5     6\n\n\n\n\n\n#original\nsuppressWarnings(\nread_csv(\"a,b,c\\n1,2\\n1,2,3,4\", show_col_types = FALSE)\n)\n\n# A tibble: 2 × 3\n      a     b     c\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1     2    NA\n2     1     2    34\n\n#revision: there was one fewer column than needed; fix this by adding \", d\" below. Also we can quiet a warning message by adding two commas after the first 2 to indicate missing values\nread_csv(\"a,b,c,d \\n1,2,,\\n1,2,3,4\", show_col_types = FALSE)\n\n# A tibble: 2 × 4\n      a     b     c     d\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1     2    NA    NA\n2     1     2     3     4\n\n\n\n\n\n#original\nread_csv(\"a,b\\n\\\"1\", show_col_types = FALSE)\n\n# A tibble: 0 × 2\n# ℹ 2 variables: a &lt;chr&gt;, b &lt;chr&gt;\n\n#revision: add a backslash before last quote so that both quotes surrounding 1 have an escape; then add second quote after 1\" to close the quotes for the entire string. Lastly, set quote argument equal to \"\"\nread_csv(\"a,b\\n\\\"1\\\",\", quote = \"\", show_col_types = FALSE)\n\n# A tibble: 1 × 2\n  a       b    \n  &lt;chr&gt;   &lt;lgl&gt;\n1 \"\\\"1\\\"\" NA   \n\n\n\n\n\n#original\nread_csv(\"a,b\\n1,2\\na,b\", show_col_types = FALSE)\n\n# A tibble: 2 × 2\n  a     b    \n  &lt;chr&gt; &lt;chr&gt;\n1 1     2    \n2 a     b    \n\n#revised: I'm unclear what the issue is that the authors are highlighting but my guess is that you likely don't need the 2nd row with values matching variable names\nread_csv(\"a,b\\n1,2\", show_col_types = FALSE)\n\n# A tibble: 1 × 2\n      a     b\n  &lt;dbl&gt; &lt;dbl&gt;\n1     1     2\n\n\n\n\n\n#original\nread_csv(\"a;b\\n1;3\", show_col_types = FALSE)\n\n# A tibble: 1 × 1\n  `a;b`\n  &lt;chr&gt;\n1 1;3  \n\n#revised: use read_csv2 which is for files where fields are delimited with semicolons instead of commas\nsuppressMessages(\nread_csv2(\"a;b\\n1;3\", show_col_types = FALSE)\n)\n\n# A tibble: 1 × 2\n      a     b\n  &lt;dbl&gt; &lt;dbl&gt;\n1     1     3"
  },
  {
    "objectID": "R4DS_C7.html#a",
    "href": "R4DS_C7.html#a",
    "title": "Chapter 7",
    "section": "5a",
    "text": "5a\n\n#original\nsuppressWarnings(\nread_csv(\"a,b\\n1,2,3\\n4,5,6\", show_col_types = FALSE)\n)\n\n# A tibble: 2 × 2\n      a     b\n  &lt;dbl&gt; &lt;dbl&gt;\n1     1    23\n2     4    56\n\n#revision: there was one fewer column than needed; fix this by adding \", c\" below\nread_csv(\"a,b,c\\n1,2,3\\n4,5,6\", show_col_types = FALSE)\n\n# A tibble: 2 × 3\n      a     b     c\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1     2     3\n2     4     5     6"
  },
  {
    "objectID": "R4DS_C7.html#b",
    "href": "R4DS_C7.html#b",
    "title": "Chapter 7",
    "section": "5b",
    "text": "5b\n\n#original\nsuppressWarnings(\nread_csv(\"a,b,c\\n1,2\\n1,2,3,4\", show_col_types = FALSE)\n)\n\n# A tibble: 2 × 3\n      a     b     c\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1     2    NA\n2     1     2    34\n\n#revision: there was one fewer column than needed; fix this by adding \", d\" below. Also we can quiet a warning message by adding two commas after the first 2 to indicate missing values\nread_csv(\"a,b,c,d \\n1,2,,\\n1,2,3,4\", show_col_types = FALSE)\n\n# A tibble: 2 × 4\n      a     b     c     d\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1     2    NA    NA\n2     1     2     3     4"
  },
  {
    "objectID": "R4DS_C7.html#c",
    "href": "R4DS_C7.html#c",
    "title": "Chapter 7",
    "section": "5c",
    "text": "5c\n\n#original\nread_csv(\"a,b\\n\\\"1\", show_col_types = FALSE)\n\n# A tibble: 0 × 2\n# ℹ 2 variables: a &lt;chr&gt;, b &lt;chr&gt;\n\n#revision: add a backslash before last quote so that both quotes surrounding 1 have an escape; then add second quote after 1\" to close the quotes for the entire string. Lastly, set quote argument equal to \"\"\nread_csv(\"a,b\\n\\\"1\\\",\", quote = \"\", show_col_types = FALSE)\n\n# A tibble: 1 × 2\n  a       b    \n  &lt;chr&gt;   &lt;lgl&gt;\n1 \"\\\"1\\\"\" NA"
  },
  {
    "objectID": "R4DS_C7.html#d",
    "href": "R4DS_C7.html#d",
    "title": "Chapter 7",
    "section": "5d",
    "text": "5d\n\n#original\nread_csv(\"a,b\\n1,2\\na,b\", show_col_types = FALSE)\n\n# A tibble: 2 × 2\n  a     b    \n  &lt;chr&gt; &lt;chr&gt;\n1 1     2    \n2 a     b    \n\n#revised: I'm unclear what the issue is that the authors are highlighting but my guess is that you likely don't need the 2nd row with values matching variable names\nread_csv(\"a,b\\n1,2\", show_col_types = FALSE)\n\n# A tibble: 1 × 2\n      a     b\n  &lt;dbl&gt; &lt;dbl&gt;\n1     1     2"
  },
  {
    "objectID": "R4DS_C7.html#e",
    "href": "R4DS_C7.html#e",
    "title": "Chapter 7",
    "section": "5e",
    "text": "5e\n\n#original\nread_csv(\"a;b\\n1;3\", show_col_types = FALSE)\n\n# A tibble: 1 × 1\n  `a;b`\n  &lt;chr&gt;\n1 1;3  \n\n#revised: use read_csv2 which is for files where fields are delimited with semicolons instead of commas\nsuppressMessages(\nread_csv2(\"a;b\\n1;3\", show_col_types = FALSE)\n)\n\n# A tibble: 1 × 2\n      a     b\n  &lt;dbl&gt; &lt;dbl&gt;\n1     1     3"
  },
  {
    "objectID": "R4DS_C7.html#exercise-7.2.3.6",
    "href": "R4DS_C7.html#exercise-7.2.3.6",
    "title": "Chapter 7",
    "section": "Exercise 7.2.3.6",
    "text": "Exercise 7.2.3.6\nPractice referring to non-syntactic names in the following data frame by:\n6 answer: see each tab below\n\n6a6b6c6d\n\n\nExtracting the variable called 1.\n\ntibble(\n  `1` = 1:10,\n  `2` = `1` * 2 + rnorm(length(`1`))\n) %&gt;% \n  select(1)\n\n# A tibble: 10 × 1\n     `1`\n   &lt;int&gt;\n 1     1\n 2     2\n 3     3\n 4     4\n 5     5\n 6     6\n 7     7\n 8     8\n 9     9\n10    10\n\n\n\n\nPlotting a scatterplot of 1 vs. 2.\n\ntibble(`1` = 1:10,\n       `2` = `1` * 2 + rnorm(length(`1`))) %&gt;%\n  ggplot(aes(.[[1]], .[[2]])) +\n  geom_point() +\n  theme_classic() +\n  labs(x = 1,\n       y = 2)\n\nWarning: Use of `.[[1]]` is discouraged.\nℹ Use `.data[[1]]` instead.\n\n\nWarning: Use of `.[[2]]` is discouraged.\nℹ Use `.data[[2]]` instead.\n\n\n\n\n\n\n\nCreating a new column called 3, which is 2 divided by 1.\n\ntibble(\n  `1` = 1:10,\n  `2` = `1` * 2 + rnorm(length(`1`)),\n  `3` = `2` / `1`)\n\n# A tibble: 10 × 3\n     `1`    `2`   `3`\n   &lt;int&gt;  &lt;dbl&gt; &lt;dbl&gt;\n 1     1  0.833 0.833\n 2     2  4.02  2.01 \n 3     3  5.63  1.88 \n 4     4  7.31  1.83 \n 5     5 10.6   2.12 \n 6     6 11.7   1.95 \n 7     7 14.4   2.05 \n 8     8 16.0   2.00 \n 9     9 18.1   2.01 \n10    10 21.9   2.19 \n\n\n\n\nRenaming the columns to one, two, and three.\n\ntibble(\n  `1` = 1:10,\n  `2` = `1` * 2 + rnorm(length(`1`)),\n  `3` = `2` / `1`) %&gt;% \n  rename(\n    one = `1`,\n    two = `2`,\n    three = `3`)\n\n# A tibble: 10 × 3\n     one   two three\n   &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1     1  2.04  2.04\n 2     2  4.10  2.05\n 3     3  6.67  2.22\n 4     4  7.73  1.93\n 5     5 10.1   2.02\n 6     6 12.2   2.03\n 7     7 13.4   1.91\n 8     8 18.3   2.29\n 9     9 16.9   1.87\n10    10 18.9   1.89"
  }
]