---
title: "Chapter 7"
code-overflow: wrap
---

Chapter 7 of R4DS teaches how to import a variety of file types into R. This page will work through a subset of the chapter's prompts. I'll start by loading the tidyverse and a variety of packages to help us read different file types.

```{r}
pacman::p_load(readxl, readr, tidyverse)
```

# 7.2.3 Exercises:

## Exercise 7.2.3.1

**What function would you use to read a file where fields were separated with “|”?**

1 answer: this can be done with read_delim(). Firsts, let's use the sales files in this chapter to create a spreadsheet with fields separated by "|". Then we can read this file in R using the read_delim() function.

```{r}
sales_files <- c(
  "https://pos.it/r4ds-01-sales",
  "https://pos.it/r4ds-02-sales",
  "https://pos.it/r4ds-03-sales"
)

sales <- read_csv(sales_files, id = "file", show_col_types = FALSE)

write_delim(sales, file = "./data/sales.csv", delim = "|")

sales_delim <- read_delim(
 "./data/sales.csv", delim = "|", show_col_types = FALSE)

sales_delim
```

## Exercise 7.2.3.2

**Apart from file, skip, and comment, what other arguments do read_csv() and read_tsv() have in common?**

2 answer: according to the help text, all arguments are the same between these two commands, such as col_names, col_types, col_select, ID, etc. We just use read_csv() vs read_tsv() when importing comma delimited files vs. tab delimited files, respectively.

```{r}
#?read_csv
#?read_tsv
```

## Exercise 7.2.3.3

**What are the most important arguments to read_fwf()?**

3 answer: the most important arguments include file and col_positions. col_positions specifies the width of the fields. Options are fwf_empty(), which guesses width based on the positions of empty columns; fwf_widths(), where you supply the width of columns; fwf_positions(), where you supply paired vectors of start and end positions; and fwf_cols(), where you supply named arguments of paired start and end positions/column widths.

```{r}
#?read_fwf
```

## Exercise 7.2.3.4

**Sometimes strings in a CSV file contain commas. To prevent them from causing problems, they need to be surrounded by a quoting character, like " or '. By default, read_csv() assumes that the quoting character will be ". To read the following text into a data frame, what argument to read_csv() do you need to specify?**

4 answer: utilize the quote argument

```{r}
read_csv("x,y\n1,'a,b'", quote = "\'", show_col_types = FALSE)
```

## Exercise 7.2.3.5

**Identify what is wrong with each of the following inline CSV files. What happens when you run the code?**

5 answer: see each tab below

:::panel-tabset

## 5a

```{r}
#original
suppressWarnings(
read_csv("a,b\n1,2,3\n4,5,6", show_col_types = FALSE)
)

#revision: there was one fewer column than needed; fix this by adding ", c" below
read_csv("a,b,c\n1,2,3\n4,5,6", show_col_types = FALSE)

```

## 5b

```{r}
#original
suppressWarnings(
read_csv("a,b,c\n1,2\n1,2,3,4", show_col_types = FALSE)
)

#revision: there was one fewer column than needed; fix this by adding ", d" below. Also we can quiet a warning message by adding two commas after the first 2 to indicate missing values
read_csv("a,b,c,d \n1,2,,\n1,2,3,4", show_col_types = FALSE)
```

## 5c

```{r}
#original
read_csv("a,b\n\"1", show_col_types = FALSE)

#revision: add a backslash before last quote so that both quotes surrounding 1 have an escape; then add second quote after 1" to close the quotes for the entire string. Lastly, set quote argument equal to ""
read_csv("a,b\n\"1\",", quote = "", show_col_types = FALSE)
```

## 5d

```{r}
#original
read_csv("a,b\n1,2\na,b", show_col_types = FALSE)

#revised: I'm unclear what the issue is that the authors are highlighting but my guess is that you likely don't need the 2nd row with values matching variable names
read_csv("a,b\n1,2", show_col_types = FALSE)
```

## 5e
```{r}
#original
read_csv("a;b\n1;3", show_col_types = FALSE)

#revised: use read_csv2 which is for files where fields are delimited with semicolons instead of commas
suppressMessages(
read_csv2("a;b\n1;3", show_col_types = FALSE)
)
```
:::

## Exercise 7.2.3.6

**Practice referring to non-syntactic names in the following data frame by:**

6 answer: see each tab below

:::panel-tabset

## 6a

Extracting the variable called 1.
  
```{r}
tibble(
  `1` = 1:10,
  `2` = `1` * 2 + rnorm(length(`1`))
) %>% 
  select(1)
```

## 6b

Plotting a scatterplot of 1 vs. 2.

```{r}
tibble(`1` = 1:10,
       `2` = `1` * 2 + rnorm(length(`1`))) %>%
  ggplot(aes(.[[1]], .[[2]])) +
  geom_point() +
  theme_classic() +
  labs(x = 1,
       y = 2)
```

## 6c

Creating a new column called 3, which is 2 divided by 1.

```{r}
tibble(
  `1` = 1:10,
  `2` = `1` * 2 + rnorm(length(`1`)),
  `3` = `2` / `1`)
```

## 6d

Renaming the columns to one, two, and three.

```{r}
tibble(
  `1` = 1:10,
  `2` = `1` * 2 + rnorm(length(`1`)),
  `3` = `2` / `1`) %>% 
  rename(
    one = `1`,
    two = `2`,
    three = `3`)
```
:::